{"version":3,"sources":["../../src/test/hourActionCards.test.js"],"names":["jest","mock","mockHourActionCards","hourActionCards","dateString","timeHour","countBack","countInpr","countComp","idDashboard","test","send","hourActionCardsNew","undefined","receive","callRec","getCreate","expect","length","toEqual","getUpdate","rec","toBe"],"mappings":"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","file":"hourActionCards.test.js","sourcesContent":["jest.mock('../models', () => { })\r\nimport mongoose from 'mongoose'\r\nimport MockHourActionCards from 'hourActionCards'\r\nimport { createnewHourActionCards } from '../controller/hourActionCards'\r\nimport { getYesterday } from '../controller/hourActionCards'\r\n\r\nconst mockHourActionCards = new MockHourActionCards()\r\n\r\nconst hourActionCards = {\r\n    dateString: \"2017-08-13-0\",\r\n    timeHour: 14,\r\n    countBack: 23,\r\n    countInpr: 5,\r\n    countComp: 0,\r\n    idDashboard: \"a1\"\r\n}\r\n\r\ntest('new hourActionCards', async () => {\r\n    const send = {\r\n        dateString: \"2017-08-13-0\",\r\n        timeHour: 14,\r\n        countBack: 23,\r\n        countInpr: 5,\r\n        countComp: 0,\r\n        idDashboard: \"a1\"\r\n    }\r\n    const hourActionCardsNew = undefined\r\n    const receive = await createnewHourActionCards(mockHourActionCards, send, hourActionCardsNew)\r\n    const callRec = mockHourActionCards.getCreate()\r\n    expect(callRec.length).toEqual(1)\r\n})\r\n\r\ntest('update countBack', async () => {\r\n    const send = {\r\n        dateString: \"2017-08-13-0\",\r\n        timeHour: 14,\r\n        countBack: 25,\r\n        countInpr: 5,\r\n        countComp: 0,\r\n        idDashboard: \"a1\"\r\n    }\r\n    const receive = await createnewHourActionCards(mockHourActionCards, send, hourActionCards)\r\n    const callRec = mockHourActionCards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update countInpr', async () => {\r\n    const send = {\r\n        dateString: \"2017-08-13-0\",\r\n        timeHour: 14,\r\n        countBack: 23,\r\n        countInpr: 6,\r\n        countComp: 0,\r\n        idDashboard: \"a1\"\r\n    }\r\n    const receive = await createnewHourActionCards(mockHourActionCards, send, hourActionCards)\r\n    const callRec = mockHourActionCards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update countComp', async () => {\r\n    const send = {\r\n        dateString: \"2017-08-13-0\",\r\n        timeHour: 14,\r\n        countBack: 23,\r\n        countInpr: 5,\r\n        countComp: 1,\r\n        idDashboard: \"a1\"\r\n    }\r\n    const receive = await createnewHourActionCards(mockHourActionCards, send, hourActionCards)\r\n    const callRec = mockHourActionCards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update all', async () => {\r\n    const send = {\r\n        dateString: \"2017-08-13-0\",\r\n        timeHour: 14,\r\n        countBack: 25,\r\n        countInpr: 6,\r\n        countComp: 1,\r\n        idDashboard: \"a1\"\r\n    }\r\n    const receive = await createnewHourActionCards(mockHourActionCards, send, hourActionCards)\r\n    const callRec = mockHourActionCards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('have hourActionCards already', async () => {\r\n    const send = {\r\n        dateString: \"2017-08-13-0\",\r\n        timeHour: 14,\r\n        countBack: 23,\r\n        countInpr: 5,\r\n        countComp: 0,\r\n        idDashboard: \"a1\"\r\n    }\r\n    const rec = await createnewHourActionCards(mockHourActionCards, send, hourActionCards)\r\n    expect(rec).toBe(false)\r\n})\r\n\r\n\r\n"]}