{"version":3,"sources":["../../src/test/members.test.js"],"names":["jest","mock","mockMembers","user","id","username","fullName","token","idBoards","test","expect","toBe","send","userNew","undefined","receive","callRec","getCreate","length","toEqual","getUpdate","rec"],"mappings":"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","file":"members.test.js","sourcesContent":["jest.mock('../models', () => {})\nimport mongoose from 'mongoose'\nimport MockMembers from 'members'\nimport {createnewUser,checkreq} from '../controller/members'\n\nconst mockMembers = new MockMembers()\nconst user = {\n    id: \"001\",\n    username: \"xxx\",\n    fullName: \"yyy\",\n    token: \"zzz\",\n    idBoards: [\"123a\", \"456b\"]\n}\n\ntest('checkreq', () => {\n    expect(checkreq({\n        \"token\": \"12345678\"\n    })).toBe(true);\n    expect(checkreq({\n        \"id\": \"1\"\n    })).toBe(true);\n    expect(checkreq({\n        \"username\": \"xxxxx\"\n    })).toBe(true);\n    expect(checkreq({\n        \"app_id\": \"abc123\"\n    })).toBe(true);\n    expect(checkreq({\n        \"idBoards\": [\"123a\", \"456b\"]\n    })).toBe(true);\n    expect(checkreq({})).toBe(true);\n    expect(checkreq({\n        \"id\": \"1\",\n        \"username\": \"xxxxx\",\n        \"app_id\": \"abc123\",\n        \"idBoards\": [\"123a\", \"456b\"],\n        \"token\": \"12345678\"\n    })) === (false);\n})\n\ntest('new user', async() => {\n    const send = {\n        id: \"001\",\n        username: \"xxx\",\n        fullName: \"yyy\",\n        token: \"zzz\",\n        idBoards: [\"123a\", \"456b\"]\n    }\n    const userNew = undefined\n    const receive = await createnewUser(mockMembers, userNew, send)\n    const callRec = mockMembers.getCreate()\n    expect(callRec.length).toEqual(1)\n})\n\ntest('update username', async() => {\n    const send = {\n        id: \"001\",\n        username: \"aaa\",\n        fullName: \"yyy\",\n        token: \"zzz\",\n        idBoards: [\"123a\", \"456b\"]\n    }\n    const receive = await createnewUser(mockMembers, user, send)\n    const callRec = mockMembers.getUpdate()\n    expect(callRec[0]).toEqual(send)\n})\n\ntest('update fullName', async() => {\n    const send = {\n        id: \"001\",\n        username: \"xxx\",\n        fullName: \"bbb\",\n        token: \"zzz\",\n        idBoards: [\"123a\", \"456b\"]\n    }\n    const receive = await createnewUser(mockMembers, user, send)\n    const callRec = mockMembers.getUpdate()\n    expect(callRec[0]).toEqual(send)\n})\n\ntest('update idBoards', async() => {\n    const send = {\n        id: \"001\",\n        username: \"xxx\",\n        fullName: \"yyy\",\n        token: \"zzz\",\n        idBoards: [\"789c\", \"456b\"]\n    }\n    const receive = await createnewUser(mockMembers, user, send)\n    const callRec = mockMembers.getUpdate()\n    expect(callRec[0]).toEqual(send)\n})\n\ntest('update all', async() => {\n    const send = {\n        id: \"001\",\n        username: \"aaa\",\n        fullName: \"bbb\",\n        token: \"zzz\",\n        idBoards: [\"789c\", \"456b\"]\n    }\n    const receive = await createnewUser(mockMembers, user, send)\n    const callRec = mockMembers.getUpdate()\n    expect(callRec[0]).toEqual(send)\n})\n\ntest('have user already', async() => {\n    const send = {\n        id: \"001\",\n        username: \"xxx\",\n        fullName: \"yyy\",\n        token: \"zzz\",\n        idBoards: [\"123a\", \"456b\"]\n    }\n    const rec = await createnewUser(mockMembers, user, send)\n    expect(rec).toBe(false)\n})"]}