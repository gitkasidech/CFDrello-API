{"version":3,"sources":["../../src/test/dateActionCards.test.js"],"names":["jest","mock","mockDateActionCards","dateActionCards","date","dateString","countBack","countInpr","countComp","idDashboard","test","send","dateActionCardsNew","undefined","receive","callRec","getCreate","expect","length","toEqual","getUpdate","rec","toBe"],"mappings":"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","file":"dateActionCards.test.js","sourcesContent":["jest.mock('../models', () => { })\r\nimport mongoose from 'mongoose'\r\nimport MockDateActionCards from 'dateActionCards'\r\nimport { createnewDateActionCards } from '../controller/dateActionCards'\r\n\r\nconst mockDateActionCards = new MockDateActionCards()\r\nconst dateActionCards = {\r\n  date: \"2017-07-16T08:16:38.033Z\",\r\n  dateString: \"2017-07-16-0\",\r\n  countBack: 5,\r\n  countInpr: 2,\r\n  countComp: 1,\r\n  idDashboard: \"a1\"\r\n}\r\n\r\ntest('new dateActionCards', async () => {\r\n  const send = {\r\n    date: \"2017-07-16T08:16:38.033Z\",\r\n    dateString: \"2017-07-16-0\",\r\n    countBack: 5,\r\n    countInpr: 2,\r\n    countComp: 1,\r\n    idDashboard: \"a1\"\r\n  }\r\n  const dateActionCardsNew = undefined\r\n  const receive = await createnewDateActionCards(mockDateActionCards, send, dateActionCardsNew)\r\n  const callRec = mockDateActionCards.getCreate()\r\n  expect(callRec.length).toEqual(1)\r\n})\r\n\r\ntest('update countBack', async() => {\r\n    const send = {\r\n      date: \"2017-07-16T08:16:38.033Z\",\r\n      dateString: \"2017-07-16-0\",\r\n      countBack: 7,\r\n      countInpr: 2,\r\n      countComp: 1,\r\n      idDashboard: \"a1\"\r\n    }\r\n    const receive = await createnewDateActionCards(mockDateActionCards, send, dateActionCards)\r\n    const callRec = mockDateActionCards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update countInpr', async() => {\r\n  const send = {\r\n    date: \"2017-07-16T08:16:38.033Z\",\r\n    dateString: \"2017-07-16-0\",\r\n    countBack: 5,\r\n    countInpr: 3,\r\n    countComp: 1,\r\n    idDashboard: \"a1\"\r\n  }\r\n  const receive = await createnewDateActionCards(mockDateActionCards, send, dateActionCards)\r\n  const callRec = mockDateActionCards.getUpdate()\r\n  expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update countComp', async() => {\r\n  const send = {\r\n    date: \"2017-07-16T08:16:38.033Z\",\r\n    dateString: \"2017-07-16-0\",\r\n    countBack: 5,\r\n    countInpr: 2,\r\n    countComp: 3,\r\n    idDashboard: \"a1\"\r\n  }\r\n  const receive = await createnewDateActionCards(mockDateActionCards, send, dateActionCards)\r\n  const callRec = mockDateActionCards.getUpdate()\r\n  expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update all', async() => {\r\n  const send = {\r\n    date: \"2017-07-16T08:16:38.033Z\",\r\n    dateString: \"2017-07-16-0\",\r\n    countBack: 7,\r\n    countInpr: 3,\r\n    countComp: 3,\r\n    idDashboard: \"a1\"\r\n  }\r\n  const receive = await createnewDateActionCards(mockDateActionCards, send, dateActionCards)\r\n  const callRec = mockDateActionCards.getUpdate()\r\n  expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('have dateActionCards already', async() => {\r\n  const send = {\r\n    date: \"2017-07-16T08:16:38.033Z\",\r\n    dateString: \"2017-07-16-0\",\r\n    countBack: 5,\r\n    countInpr: 2,\r\n    countComp: 1,\r\n    idDashboard: \"a1\"\r\n  }\r\n    const rec = await createnewDateActionCards(mockDateActionCards, send, dateActionCards)\r\n    expect(rec).toBe(false)\r\n})\r\n\r\n"]}