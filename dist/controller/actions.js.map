{"version":3,"sources":["../../src/controller/actions.js"],"names":["checkCreateActions","board","key","token","t","resolve","reject","get","err","data","then","len","length","i","findOne","id","actions","createnewActions","callActions","console","log","date","Actions","d","Date","ymd","create","idMemberCreator","type","dateString","newactions","update","$set"],"mappings":"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","file":"actions.js","sourcesContent":["import Trello from 'node-trello'\r\nimport {Actions} from '../models/actions'\r\nimport Promise from 'bluebird'\r\nimport {convertDates} from './convertDates'\r\n\r\nexport const checkCreateActions = async (board,key,token) => {\r\n    let t = new Trello(key,token)\r\n    // return new Promise((resolve, reject) => {\r\n    //     t.get(\"/1/boards/\"+board+\"/actions/?filter=createCard,moveCardToBoard,commentCard,updateCard:idList,updateCard:closed&limit=1000\", (err, data) =>{\r\n    //         if (err) reject(err)\r\n    //         resolve(data)\r\n    //     })\r\n    // }).then(async (data) => {\r\n    //         const len = data.length\r\n    //         for (let i = 0; i < len; i++) {\r\n    //             const actions = await Actions.findOne({ id: (data[i]).id })\r\n    //             const callActions = await createnewActions(Actions, actions, data[i])\r\n    //             // if (callActions)\r\n    //             //     console.log(\"create or update new action complete\")\r\n    //             // else\r\n    //             //     console.log(\"have a action already!!\")\r\n    //         }\r\n    //         return  data[len-1].date\r\n    \r\n    // })\r\n    return new Promise((resolve, reject) => {\r\n        t.get(\"/1/boards/\" + board + \"/actions/?filter=updateCard:closed&limit=1000\", (err, data) => {\r\n            if (err) reject(JSON.stringify(err))\r\n            resolve(data)\r\n        })\r\n    }).then(async (data) => {\r\n        const len = data.length\r\n        for (let i = 0; i < len; i++) {\r\n            const actions = await Actions.findOne({ id: (data[i]).id })\r\n            const callActions = await createnewActions(Actions, actions, data[i])\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            t.get(\"/1/boards/\" + board + \"/actions/?filter=updateCard:idList&limit=1000\", (err, data) => {\r\n                if (err) reject(err)\r\n                resolve(data)\r\n            })\r\n        }).then(async (data) => {\r\n            const len = data.length\r\n            for (let i = 0; i < len; i++) {\r\n                const actions = await Actions.findOne({ id: (data[i]).id })\r\n                const callActions = await createnewActions(Actions, actions, data[i])\r\n            }\r\n            return new Promise((resolve, reject) => {\r\n                t.get(\"/1/boards/\" + board + \"/actions/?filter=commentCard&limit=1000\", (err, data) => {\r\n                    if (err) reject(err)\r\n                    resolve(data)\r\n                })\r\n            }).then(async (data) => {\r\n                const len = data.length\r\n                for (let i = 0; i < len; i++) {\r\n                    const actions = await Actions.findOne({ id: (data[i]).id })\r\n                    const callActions = await createnewActions(Actions, actions, data[i])\r\n                }\r\n                return new Promise((resolve, reject) => {\r\n                    t.get(\"/1/boards/\" + board + \"/actions/?filter=moveCardToBoard&limit=1000\", (err, data) => {\r\n                        if (err) reject(err)\r\n                        resolve(data)\r\n                    })\r\n                }).then(async (data) => {\r\n                    const len = data.length\r\n                    for (let i = 0; i < len; i++) {\r\n                        const actions = await Actions.findOne({ id: (data[i]).id })\r\n                        const callActions = await createnewActions(Actions, actions, data[i])\r\n                    }\r\n                    return new Promise((resolve, reject) => {\r\n                        t.get(\"/1/boards/\" + board + \"/actions/?filter=createCard&limit=1000\", (err, data) => {\r\n                            if (err) reject(err)\r\n                            resolve(data)\r\n                        })\r\n                    }).then(async (data) => {\r\n                        const len = data.length\r\n                        for (let i = 0; i < len; i++) {\r\n                            const actions = await Actions.findOne({ id: (data[i]).id })\r\n                            const callActions = await createnewActions(Actions, actions, data[i])\r\n                        }\r\n                        console.log(data[len - 1].date)\r\n                        return data[len - 1].date\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    })\r\n\r\n}\r\nexport const createnewActions = async (Actions,actions,data) => {\r\n    if (!actions) {\r\n        let d = new Date(data.date)\r\n        const ymd = await convertDates(d)\r\n        const newactions = await Actions.create({\r\n            id: data.id,\r\n            idMemberCreator: data.idMemberCreator,\r\n            data: data.data,\r\n            type: data.type,\r\n            date: data.date,\r\n            dateString: ymd\r\n        })\r\n        return newactions\r\n    }\r\n    else if (actions.idMemberCreator != data.idMemberCreator || JSON.stringify(actions.data) != JSON.stringify(data.data) || actions.type != data.type || actions.date != data.date ) {\r\n        let d = new Date(data.date)\r\n        const ymd = await convertDates(d)\r\n        const newactions = await Actions.update({id: data.id},{$set:{\r\n            idMemberCreator: data.idMemberCreator,\r\n            data: data.data,\r\n            type: data.type,\r\n            date: data.date,\r\n            dateString: ymd\r\n        }})\r\n        return newactions\r\n    } \r\n    else\r\n        return false\r\n}"]}