{"version":3,"sources":["../../src/controller/actions.js"],"names":["checkCreateActions","board","key","token","t","resolve","reject","get","err","data","then","len","length","i","findOne","id","actions","createnewActions","callActions","console","log","date","Actions","d","Date","ymd","create","idMemberCreator","type","dateString","newactions","update","$set"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AAEO,IAAMA;AAAA,0EAAqB,kBAAOC,KAAP,EAAaC,GAAb,EAAiBC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,yBAD0B,GACtB,yBAAWF,GAAX,EAAeC,KAAf,CADsB;AAAA,0DAEvB,uBAAY,UAACE,OAAD,EAAUC,MAAV,EAAqB;AACpCF,8BAAEG,GAAF,CAAM,eAAeN,KAAf,GAAuB,sBAA7B,EAAqD,UAACO,GAAD,EAAMC,IAAN,EAAc;AAC/D,oCAAID,GAAJ,EAASF,OAAOE,GAAP;AACTH,wCAAQI,IAAR;AACH,6BAHD;AAIH,yBALM,EAKJC,IALI;AAAA,mGAKC,iBAAOD,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACME,mDADN,GACYF,KAAKG,MADjB;AAESC,iDAFT,GAEa,CAFb;;AAAA;AAAA,sDAEgBA,IAAIF,GAFpB;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAG0B,iBAAQG,OAAR,CAAgB,EAAEC,IAAKN,KAAKI,CAAL,CAAD,CAAUE,EAAhB,EAAhB,CAH1B;;AAAA;AAGUC,uDAHV;AAAA;AAAA,uDAI8BC,mCAA0BD,OAA1B,EAAmCP,KAAKI,CAAL,CAAnC,CAJ9B;;AAAA;AAIUK,2DAJV;;AAKI,oDAAIA,WAAJ,EACIC,QAAQC,GAAR,CAAY,sCAAZ,EADJ,KAGID,QAAQC,GAAR,CAAY,yBAAZ;;AARR;AAEyBP,mDAFzB;AAAA;AAAA;;AAAA;AAAA,iFAUQJ,KAAKE,MAAI,CAAT,EAAYU,IAVpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BALD;;AAAA;AAAA;AAAA;AAAA,4BAFuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAsBA,IAAMJ;AAAA,2EAAmB,kBAAOK,OAAP,EAAeN,OAAf,EAAuBP,IAAvB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BACvBO,OADuB;AAAA;AAAA;AAAA;;AAEpBO,yBAFoB,GAEhB,IAAIC,IAAJ,CAASf,KAAKY,IAAd,CAFgB;AAAA;AAAA,+BAGN,gCAAaE,CAAb,CAHM;;AAAA;AAGlBE,2BAHkB;AAAA;AAAA,+BAICH,QAAQI,MAAR,CAAe;AACpCX,gCAAIN,KAAKM,EAD2B;AAEpCY,6CAAiBlB,KAAKkB,eAFc;AAGpClB,kCAAMA,KAAKA,IAHyB;AAIpCmB,kCAAMnB,KAAKmB,IAJyB;AAKpCP,kCAAMZ,KAAKY,IALyB;AAMpCQ,wCAAYJ;AANwB,yBAAf,CAJD;;AAAA;AAIlBK,kCAJkB;AAAA,0DAYjBA,UAZiB;;AAAA;AAAA,8BAcnBd,QAAQW,eAAR,IAA2BlB,KAAKkB,eAAhC,IAAmD,yBAAeX,QAAQP,IAAvB,KAAgC,yBAAeA,KAAKA,IAApB,CAAnF,IAAgHO,QAAQY,IAAR,IAAgBnB,KAAKmB,IAArI,IAA6IZ,QAAQK,IAAR,IAAgBZ,KAAKY,IAd/I;AAAA;AAAA;AAAA;;AAepBE,0BAfoB,GAehB,IAAIC,IAAJ,CAASf,KAAKY,IAAd,CAfgB;AAAA;AAAA,+BAgBN,gCAAaE,EAAb,CAhBM;;AAAA;AAgBlBE,4BAhBkB;AAAA;AAAA,+BAiBCH,QAAQS,MAAR,CAAe,EAAChB,IAAIN,KAAKM,EAAV,EAAf,EAA6B,EAACiB,MAAK;AACxDL,iDAAiBlB,KAAKkB,eADkC;AAExDlB,sCAAMA,KAAKA,IAF6C;AAGxDmB,sCAAMnB,KAAKmB,IAH6C;AAIxDP,sCAAMZ,KAAKY,IAJ6C;AAKxDQ,4CAAYJ;AAL4C,6BAAN,EAA7B,CAjBD;;AAAA;AAiBlBK,mCAjBkB;AAAA,0DAwBjBA,WAxBiB;;AAAA;AAAA,0DA2BjB,KA3BiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"actions.js","sourcesContent":["import Trello from 'node-trello'\r\nimport {Actions} from '../models/actions'\r\nimport Promise from 'bluebird'\r\nimport {convertDates} from './convertDates'\r\n\r\nexport const checkCreateActions = async (board,key,token) => {\r\n    let t = new Trello(key,token)  \r\n    return new Promise((resolve, reject) => {\r\n        t.get(\"/1/boards/\" + board + \"/actions/?limit=1000\", (err, data) =>{\r\n            if (err) reject(err)\r\n            resolve(data)\r\n        })\r\n    }).then(async (data) => {\r\n            const len = data.length\r\n            for (let i = 0; i < len; i++) {\r\n                const actions = await Actions.findOne({ id: (data[i]).id })\r\n                const callActions = await createnewActions(Actions, actions, data[i])\r\n                if (callActions)\r\n                    console.log(\"create or update new action complete\")\r\n                else\r\n                    console.log(\"have a action already!!\")\r\n            }\r\n            return  data[len-1].date\r\n    \r\n    })\r\n}\r\n\r\nexport const createnewActions = async (Actions,actions,data) => {\r\n    if (!actions) {\r\n        let d = new Date(data.date)\r\n        const ymd = await convertDates(d)\r\n        const newactions = await Actions.create({\r\n            id: data.id,\r\n            idMemberCreator: data.idMemberCreator,\r\n            data: data.data,\r\n            type: data.type,\r\n            date: data.date,\r\n            dateString: ymd\r\n        })\r\n        return newactions\r\n    }\r\n    else if (actions.idMemberCreator != data.idMemberCreator || JSON.stringify(actions.data) != JSON.stringify(data.data) || actions.type != data.type || actions.date != data.date ) {\r\n        let d = new Date(data.date)\r\n        const ymd = await convertDates(d)\r\n        const newactions = await Actions.update({id: data.id},{$set:{\r\n            idMemberCreator: data.idMemberCreator,\r\n            data: data.data,\r\n            type: data.type,\r\n            date: data.date,\r\n            dateString: ymd\r\n        }})\r\n        return newactions\r\n    } \r\n    else\r\n        return false\r\n}"]}