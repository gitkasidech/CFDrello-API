{"version":3,"sources":["../../src/controller/actions.js"],"names":["checkCreateActions","board","key","token","t","get","err","data","len","length","i","findOne","id","actions","createnewActions","callActions","console","log","Actions","create","idMemberCreator","type","date","newactions","update","$set"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEO,IAAMA;AAAA,0EAAqB,kBAAMC,KAAN,EAAYC,GAAZ,EAAgBC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,yBAD0B,GACtB,yBAAWF,GAAX,EAAeC,KAAf,CADsB;;AAE9BC,0BAAEC,GAAF,CAAM,eAAeJ,KAAf,GAAuB,UAA7B;AAAA,mGAAyC,iBAAOK,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACjCD,GADiC;AAAA;AAAA;AAAA;;AAAA,sDACtBA,GADsB;;AAAA;AAE/BE,mDAF+B,GAEzBD,KAAKE,MAFoB;AAG5BC,iDAH4B,GAGxB,CAHwB;;AAAA;AAAA,sDAGrBA,IAAIF,GAHiB;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAIX,iBAAQG,OAAR,CAAgB,EAACC,IAAIL,KAAKG,CAAL,CAAD,CAAUE,EAAd,EAAhB,CAJW;;AAAA;AAI3BC,uDAJ2B;AAAA;AAAA,uDAKPC,mCAAyBD,OAAzB,EAAiCN,KAAKG,CAAL,CAAjC,CALO;;AAAA;AAK3BK,2DAL2B;;AAMjC,oDAAIA,WAAJ,EACIC,QAAQC,GAAR,CAAY,sCAAZ,EADJ,KAGID,QAAQC,GAAR,CAAY,yBAAZ;;AAT6B;AAGZP,mDAHY;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAzC;;AAAA;AAAA;AAAA;AAAA;;AAF8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgBA,IAAMI;AAAA,2EAAmB,kBAAMI,OAAN,EAAcL,OAAd,EAAsBN,IAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BACvBM,OADuB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAECK,QAAQC,MAAR,CAAe;AACpCP,gCAAIL,KAAKK,EAD2B;AAEpCQ,6CAAiBb,KAAKa,eAFc;AAGpCb,kCAAMA,KAAKA,IAHyB;AAIpCc,kCAAMd,KAAKc,IAJyB;AAKpCC,kCAAMf,KAAKe;AALyB,yBAAf,CAFD;;AAAA;AAElBC,kCAFkB;AAAA,0DASjBA,UATiB;;AAAA;AAAA,8BAWnBV,QAAQO,eAAR,IAA2Bb,KAAKa,eAAhC,IAAmD,yBAAeP,QAAQN,IAAvB,KAAgC,yBAAeA,KAAKA,IAApB,CAAnF,IAAgHM,QAAQQ,IAAR,IAAgBd,KAAKc,IAArI,IAA6IR,QAAQS,IAAR,IAAgBf,KAAKe,IAX/I;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAYCJ,QAAQM,MAAR,CAAe,EAACZ,IAAIL,KAAKK,EAAV,EAAf,EAA6B,EAACa,MAAK;AACxDL,iDAAiBb,KAAKa,eADkC;AAExDb,sCAAMA,KAAKA,IAF6C;AAGxDc,sCAAMd,KAAKc,IAH6C;AAIxDC,sCAAMf,KAAKe;AAJ6C,6BAAN,EAA7B,CAZD;;AAAA;AAYlBC,mCAZkB;AAAA,0DAkBjBA,WAlBiB;;AAAA;AAAA,0DAqBjB,KArBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"actions.js","sourcesContent":["import Trello from 'node-trello'\r\nimport {Actions} from '../models/actions'\r\n\r\nexport const checkCreateActions = async(board,key,token) => {\r\n    let t = new Trello(key,token)\r\n    t.get(\"/1/boards/\" + board + \"/actions\", async (err, data) => {\r\n        if (err) throw err\r\n        const len = data.length\r\n        for (let i = 0; i < len; i++){\r\n            const actions = await Actions.findOne({id:(data[i]).id})\r\n            const callActions = await createnewActions(Actions,actions,data[i])\r\n            if (callActions) \r\n                console.log(\"create or update new action complete\")\r\n            else \r\n                console.log(\"have a action already!!\")\r\n        }  \r\n    })   \r\n}\r\n\r\nexport const createnewActions = async(Actions,actions,data) => {\r\n    if (!actions) {\r\n        const newactions = await Actions.create({\r\n            id: data.id,\r\n            idMemberCreator: data.idMemberCreator,\r\n            data: data.data,\r\n            type: data.type,\r\n            date: data.date\r\n        })\r\n        return newactions\r\n    }\r\n    else if (actions.idMemberCreator != data.idMemberCreator || JSON.stringify(actions.data) != JSON.stringify(data.data) || actions.type != data.type || actions.date != data.date ) {\r\n        const newactions = await Actions.update({id: data.id},{$set:{\r\n            idMemberCreator: data.idMemberCreator,\r\n            data: data.data,\r\n            type: data.type,\r\n            date: data.date\r\n        }})\r\n        return newactions\r\n    } \r\n    else\r\n        return false\r\n}"]}