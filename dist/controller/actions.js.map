{"version":3,"sources":["../../src/controller/actions.js"],"names":["checkCreateActions","board","key","token","sinceDate","beforeDate","resolve","reject","uri","method","err","response","body","then","data","JSON","parse","len","length","i","findOne","id","actions","createnewActions","callActions","getDateCreateBoard","date","Actions","d","Date","ymd","create","idMemberCreator","memberCreator","type","dateString","newactions","update","$set"],"mappings":"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","file":"actions.js","sourcesContent":["import Trello from 'node-trello'\nimport request from 'request'\nimport {Actions} from '../models/actions'\nimport Promise from 'bluebird'\nimport {convertDates} from './convertDates'\n\nexport const checkCreateActions = async (board,key,token,sinceDate,beforeDate) => {\n    return new Promise((resolve, reject) => {\n        request({\n            uri: 'https://api.trello.com/1/board/'+board+'/actions/?filter=createCard,moveCardToBoard,commentCard,copyCard,convertToCardFromCheckItem,updateCard:idList,updateCard:closed,emailCard,moveListFromBoard&since='+sinceDate+'&before='+beforeDate+'&limit=1000&key='+key+'&token='+token,\n            method: 'GET'\n        }, (err, response, body) =>{\n            if (err) reject(JSON.stringify(err))\n            resolve(body)\n        })\n    }).then(async (data) => {\n            data = JSON.parse(data)\n            const len = data.length\n            for (let i = 0; i < len; i++) {\n                const actions = await Actions.findOne({ id: (data[i]).id })\n                const callActions = await createnewActions(Actions, actions, data[i])\n            }\n    })\n}\n\nexport const getDateCreateBoard = async (board,key,token) => {\n    return new Promise((resolve, reject) => {\n        request({\n            uri: 'https://api.trello.com/1/board/'+board+'/actions/?filter=createBoard&key='+key+'&token='+token,\n            method: 'GET'\n        }, (err, response, body) =>{\n            if (err) reject(JSON.stringify(err))\n            body = JSON.parse(body)\n            resolve(body[0].date)\n        })\n    })\n}\n\nexport const createnewActions = async (Actions,actions,data) => {\n    if (!actions) {\n        let d = new Date(data.date)\n        const ymd = await convertDates(d)\n        const newactions = await Actions.create({\n            id: data.id,\n            idMemberCreator: data.idMemberCreator,\n            memberCreator: data.memberCreator,\n            data: data.data,\n            type: data.type,\n            date: data.date,\n            dateString: ymd\n        })\n        return newactions\n    }\n    else if (actions.idMemberCreator != data.idMemberCreator || JSON.stringify(actions.data) != JSON.stringify(data.data) || actions.type != data.type || actions.date != data.date || JSON.stringify(actions.memberCreator) != JSON.stringify(data.memberCreator)) {\n        let d = new Date(data.date)\n        const ymd = await convertDates(d)\n        const newactions = await Actions.update({id: data.id},{$set:{\n            idMemberCreator: data.idMemberCreator,\n            memberCreator: data.memberCreator,\n            type: data.type,\n        }})\n        return newactions\n    } \n    else\n        return false\n}"]}