{"version":3,"sources":["../../src/controller/dateActionCards.js"],"names":["createDateActionCards","dateStart","dashboard","now","Date","countBack","countInpr","countComp","setDate","getDate","d","ymd","find","dateString","dataThisDay","len","length","listBack","listInpr","listComp","dateAction","i","data","type","indexOf","list","id","date","listAfter","listBefore","card","closed","old","allData","idDashboard","_id","findOne","dateActionCards","createnewDateActionCards","callDateActionCards","DateActionCards","create","newDateActionCards","update","$set"],"mappings":"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","file":"dateActionCards.js","sourcesContent":["import {DateActionCards} from '../models/dateActionCards'\r\nimport {Actions} from '../models/actions'\r\nimport {convertDates} from './convertDates'\r\n\r\nexport const createDateActionCards = async(dateStart,dashboard) => {\r\n    const now = new Date()\r\n    let countBack = 0 \r\n    let countInpr = 0\r\n    let countComp = 0\r\n    now.setDate(now.getDate() + 1)\r\n    for (let d = new Date(dateStart); d <= now; d.setDate(d.getDate() + 1)) {\r\n        const ymd = await convertDates(d)\r\n        const dataThisDay =  await Actions.find({dateString: ymd})\r\n        const len = dataThisDay.length\r\n        const listBack = dashboard.listBack\r\n        const listInpr = dashboard.listInpr\r\n        const listComp = dashboard.listComp\r\n        let dateAction = d\r\n        for(let i=0;i<len;i++){\r\n            const data = dataThisDay[i].data\r\n            if(dataThisDay[i].type==\"createCard\" || dataThisDay[i].type==\"moveCardToBoard\" ){\r\n                if (listBack.indexOf(data.list.id) != -1) countBack++\r\n                else if (listInpr.indexOf(data.list.id) != -1) countInpr++\r\n                else if (listComp.indexOf(data.list.id) != -1) countComp++\r\n                dateAction = dataThisDay[i].date\r\n            }\r\n            else if(dataThisDay[i].type==\"updateCard\" && data.listAfter && data.listBefore){\r\n                if (listBack.indexOf(data.listAfter.id) != -1) countBack++\r\n                else if (listInpr.indexOf(data.listAfter.id) != -1) countInpr++\r\n                else if (listComp.indexOf(data.listAfter.id) != -1) countComp++\r\n                \r\n                if (listBack.indexOf(data.listBefore.id) != -1) countBack--\r\n                else if (listInpr.indexOf(data.listBefore.id) != -1) countInpr--\r\n                else if (listComp.indexOf(data.listBefore.id) != -1) countComp--\r\n                dateAction = dataThisDay[i].date\r\n            }\r\n            else if(dataThisDay[i].type==\"updateCard\" && data.card.closed == false && data.old.closed == true){ \r\n                if (listBack.indexOf(data.list.id) != -1) countBack++\r\n                else if (listInpr.indexOf(data.list.id) != -1) countInpr++\r\n                else if (listComp.indexOf(data.list.id) != -1) countComp++\r\n                dateAction = dataThisDay[i].date\r\n            }\r\n            else if(dataThisDay[i].type==\"updateCard\" && data.card.closed == true && data.old.closed == false){ \r\n                if (listBack.indexOf(data.list.id) != -1) countBack--\r\n                else if (listInpr.indexOf(data.list.id) != -1) countInpr--\r\n                else if (listComp.indexOf(data.list.id) != -1) countComp--\r\n                dateAction = dataThisDay[i].date\r\n            }\r\n        }\r\n        const allData = {\r\n            date: dateAction,\r\n            dateString: ymd,\r\n            countBack: countBack,\r\n            countInpr: countInpr,\r\n            countComp: countComp,\r\n            idDashboard: dashboard._id\r\n        }\r\n        const dateActionCards = await DateActionCards.findOne({ dateString: allData.dateString, idDashboard: allData.idDashboard})\r\n        const callDateActionCards = await createnewDateActionCards(DateActionCards,allData,dateActionCards)\r\n        // if (callDateActionCards)\r\n        //     console.log(\"create or update new DateActionCards complete\")\r\n        // else\r\n        //     console.log(\"have a DateActionCards already!!\")\r\n    }\r\n}\r\n\r\nexport const createnewDateActionCards = async (DateActionCards,allData,dateActionCards) => {\r\n    if (!dateActionCards) {\r\n        const newDateActionCards = await DateActionCards.create(allData)\r\n        return newDateActionCards\r\n    }\r\n    else if (allData.countBack != dateActionCards.countBack || allData.countInpr != dateActionCards.countInpr || allData.countComp != dateActionCards.countComp ) {\r\n        const newDateActionCards = await DateActionCards.update({_id: dateActionCards._id},{$set:{\r\n            countBack: allData.countBack,\r\n            countInpr: allData.countInpr,\r\n            countComp: allData.countComp\r\n        }})\r\n        return newDateActionCards\r\n    } \r\n    else\r\n        return false\r\n}\r\n\r\n"]}