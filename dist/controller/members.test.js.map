{"version":3,"sources":["../../src/controller/members.test.js"],"names":["test","expect","toBe","user","id","username","fullname","token","givenUser","rec"],"mappings":";;;;;;;;;;AAAA;;;;AAEAA,KAAK,UAAL,EAAiB,YAAM;AACnBC,WAAO,uBAAS;AACZ,iBAAS;AADG,KAAT,CAAP,EAEIC,IAFJ,CAES,IAFT;AAGAD,WAAO,uBAAS;AACZ,cAAM;AADM,KAAT,CAAP,EAEIC,IAFJ,CAES,IAFT;AAGAD,WAAO,uBAAS;AACZ,oBAAY;AADA,KAAT,CAAP,EAEIC,IAFJ,CAES,IAFT;AAGAD,WAAO,uBAAS;AACZ,cAAM,GADM;AAEZ,iBAAS;AAFG,KAAT,CAAP,EAGIC,IAHJ,CAGS,IAHT;AAIAD,WAAO,uBAAS;AACZ,oBAAY,OADA;AAEZ,iBAAS;AAFG,KAAT,CAAP,EAGIC,IAHJ,CAGS,IAHT;AAIAD,WAAO,uBAAS;AACZ,cAAM,GADM;AAEZ,oBAAY;AAFA,KAAT,CAAP,EAGIC,IAHJ,CAGS,IAHT;AAIAD,WAAO,uBAAS,EAAT,CAAP,EAAqBC,IAArB,CAA0B,IAA1B;AACAD,WAAO,uBAAS;AACZ,cAAM,GADM;AAEZ,oBAAY,OAFA;AAGZ,iBAAS;AAHG,KAAT,CAAP,MAIS,KAJT;AAKH,CA5BD;;AA8BAD,KAAK,UAAL,6DAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AACPG,wBADO,GACA;AACTC,4BAAI,KADK;AAETC,kCAAU,KAFD;AAGTC,kCAAU,KAHD;AAITC,+BAAO;AAJE,qBADA;AAOPC,6BAPO,GAOK;AACdJ,4BAAI,KADU;AAEdC,kCAAU,KAFI;AAGdC,kCAAU,KAHI;AAIdC,+BAAO;AAJO,qBAPL;AAAA;AAAA,2BAaK,4BAAcJ,IAAd,EAAoBK,SAApB,CAbL;;AAAA;AAaPC,uBAbO;;AAcbR,2BAAOQ,GAAP,EAAYP,IAAZ,CAAiB,KAAjB;;AAda;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"members.test.js","sourcesContent":["import { createnewUser, checkreq } from './members'\n\ntest('checkreq', () => {\n    expect(checkreq({\n        \"token\": \"12345678\"\n    })).toBe(true);\n    expect(checkreq({\n        \"id\": \"1\"\n    })).toBe(true);\n    expect(checkreq({\n        \"username\": \"xxxxx\"\n    })).toBe(true);\n    expect(checkreq({\n        \"id\": \"1\",\n        \"token\": \"12345678\"\n    })).toBe(true);\n    expect(checkreq({\n        \"username\": \"xxxxx\",\n        \"token\": \"12345678\"\n    })).toBe(true);\n    expect(checkreq({\n        \"id\": \"1\",\n        \"username\": \"xxxxx\"\n    })).toBe(true);\n    expect(checkreq({})).toBe(true);\n    expect(checkreq({\n        \"id\": \"1\",\n        \"username\": \"xxxxx\",\n        \"token\": \"12345678\"\n    })) === (false);\n});\n\ntest('old user', async () => {   \n    const user = {\n        id: \"001\",\n        username: \"xxx\",\n        fullname: \"yyy\",\n        token: \"zzz\"\n    }\n    const givenUser = {\n        id: \"001\",\n        username: \"xxx\",\n        fullname: \"yyy\",\n        token: \"zzz\"\n    }\n    const rec = await createnewUser(user, givenUser)\n    expect(rec).toBe(false)\n});\n\n// test('new user', async () => {\n//     const user = null\n//     const givenUser = {\n//         id: \"001\",\n//         username: \"xxx\",\n//         fullname: \"yyy\",\n//         token: \"zzz\"\n//     }\n//     const rec = await createnewUser(givenUser)\n//     expect(rec).toBe(true)\n// });\n\n\n\n"]}