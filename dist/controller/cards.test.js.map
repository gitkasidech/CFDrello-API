{"version":3,"sources":["../../src/controller/cards.test.js"],"names":["jest","mock","mockCards","cards","id","name","idBoard","idList","idMembers","idLabels","test","send","cardsNew","undefined","receive","callRec","getCreate","expect","length","toEqual","getUpdate","rec","toBe"],"mappings":"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","file":"cards.test.js","sourcesContent":["jest.mock('../models', () => { })\r\nimport mongoose from 'mongoose'\r\nimport MockCards from 'cards'\r\nimport { createnewCards } from './cards'\r\n\r\nconst mockCards = new MockCards()\r\nconst cards = {\r\n    id: \"123a\",\r\n    name: \"xxx\",\r\n    idBoard: \"456z\",\r\n    idList: \"789s\",\r\n    idMembers: [\"1a\",\"2b\"],\r\n    idLabels: [\"a1\",\"b2\"]\r\n}\r\n\r\ntest('new cards', async () => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        idBoard: \"456z\",\r\n        idList: \"789s\",\r\n        idMembers: [\"1a\",\"2b\"],\r\n        idLabels: [\"a1\",\"b2\"]\r\n    }\r\n    const cardsNew = undefined\r\n    const receive = await createnewCards(mockCards,cardsNew, send)\r\n    const callRec = mockCards.getCreate()\r\n    expect(callRec.length).toEqual(1)\r\n});\r\n\r\ntest('update name', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"yyy\",\r\n        idBoard: \"456z\",\r\n        idList: \"789s\",\r\n        idMembers: [\"1a\",\"2b\"],\r\n        idLabels: [\"a1\",\"b2\"]\r\n    }\r\n    const receive = await createnewCards(mockCards,cards, send)\r\n    const callRec = mockCards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update idList', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        idBoard: \"456z\",\r\n        idList: \"789t\",\r\n        idMembers: [\"1a\",\"2b\"],\r\n        idLabels: [\"a1\",\"b2\"]\r\n    }\r\n    const receive = await createnewCards(mockCards,cards, send)\r\n    const callRec = mockCards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update idMembers', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        idBoard: \"456z\",\r\n        idList: \"789s\",\r\n        idMembers: [\"111a\",\"222b\"],\r\n        idLabels: [\"a1\",\"b2\"]\r\n    }\r\n    const receive = await createnewCards(mockCards,cards, send)\r\n    const callRec = mockCards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update idLabels', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        idBoard: \"456z\",\r\n        idList: \"789s\",\r\n        idMembers: [\"1a\",\"2b\"],\r\n        idLabels: [\"a111\",\"b222\"]\r\n    }\r\n    const receive = await createnewCards(mockCards,cards, send)\r\n    const callRec = mockCards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update all', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"yyy\",\r\n        idBoard: \"456z\",\r\n        idList: \"789t\",\r\n        idMembers: [\"111a\",\"222b\"],\r\n        idLabels: [\"a111\",\"b222\"]\r\n    }\r\n    const receive = await createnewCards(mockCards,cards, send)\r\n    const callRec = mockCards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('have cards already', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        idBoard: \"456z\",\r\n        idList: \"789s\",\r\n        idMembers: [\"1a\",\"2b\"],\r\n        idLabels: [\"a1\",\"b2\"]\r\n    }\r\n    const rec = await createnewCards(mockCards,cards, send)\r\n    expect(rec).toBe(false)\r\n})\r\n\r\n"]}