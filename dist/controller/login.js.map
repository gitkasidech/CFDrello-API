{"version":3,"sources":["../../src/controller/login.js"],"names":["OAuth","require","requestURL","accessURL","authorizeURL","appName","key","secret","loginCallback","host","port","oauth_secrets","oauth","loginAuthen","req","res","console","log","Date","getOAuthRequestToken","error","token","tokenSecret","results","redirect","callback","query","parse","url","oauth_token","verifier","oauth_verifier","getOAuthAccessToken","accessToken","accessTokenSecret","getProtectedResource","data","respond","dataJ","JSON","sendData","app_id","id","username","fullName","idBoards","resData"],"mappings":"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","file":"login.js","sourcesContent":["import http from 'http'\nconst OAuth = require('oauth').OAuth\nimport url from 'url'\nimport { havedata } from './members'\nimport {webs,server} from '../configs'\n\nconst requestURL = \"https://trello.com/1/OAuthGetRequestToken\"\nconst accessURL = \"https://trello.com/1/OAuthGetAccessToken\"\nconst authorizeURL = \"https://trello.com/1/OAuthAuthorizeToken\"\n// const sendURL = \"http://127.0.0.1/gettoken\"\n// const beginURL = \"http://127.0.0.1\"\nconst appName = \"CFDrello Dashboard\"\n\nconst key = \"662fa775f48bd56cea11e8be634da284\"\nconst secret = \"8e3dd310f5a5a5e8757563ecc30d992664d895abc296441bfc1cf515ffdefa51\"\n\nconst loginCallback = `http://${webs.host}:${server.port}/callback`\nconst oauth_secrets = {}\n\nconst oauth = new OAuth(requestURL, accessURL, key, secret, \"1.0A\", loginCallback, \"HMAC-SHA1\")\n\nexport const loginAuthen = async (req,res) => {\n    console.log(`GET '/login' ðŸ¤  ${Date()}`)\n    oauth.getOAuthRequestToken((error, token, tokenSecret, results) => {\n        // console.log(`in getOAuthRequestToken - token: ${token}, tokenSecret: ${tokenSecret}, resultes ${JSON.stringify(results)}, error: ${JSON.stringify(error)}`)\n        oauth_secrets[token] = tokenSecret\n        res.redirect(`${authorizeURL}?oauth_token=${token}&name=${appName}&expiration=never`)\n    });\n}\n\nexport const callback = async (req, res) => {\n    const query = url.parse(req.url, true).query\n    const token = query.oauth_token\n    const tokenSecret = oauth_secrets[token]\n    const verifier = query.oauth_verifier\n    oauth.getOAuthAccessToken(token, tokenSecret, verifier, async (error, accessToken, accessTokenSecret, results) => {\n        console.log(`in getOAuthAccessToken - accessToken: ${accessToken}, accessTokenSecret: ${accessTokenSecret}, error: ${error}`)\n        oauth.getProtectedResource(\"https://api.trello.com/1/members/me\", \"GET\",accessToken, accessTokenSecret, async (error, data, respond) => {\n            if(error)\n                res.redirect(`http://${webs.host}:${webs.port}`)\n            console.log(`in getProtectedResource - accessToken: ${accessToken}, accessTokenSecret: ${accessTokenSecret}`)\n            const dataJ = JSON.parse(data);\n            const sendData = {\n                app_id: key,\n                token: accessToken,\n                id: dataJ.id,\n                username: dataJ.username,\n                fullName: dataJ.fullName,\n                idBoards: dataJ.idBoards\n            }\n            const resData = await havedata(sendData)\n            res.redirect(`http://${webs.host}:${webs.port}/gettoken/${accessToken}/${dataJ.id}`)\n        })\n    })\n}"]}