{"version":3,"sources":["../../src/controller/login.js"],"names":["OAuth","require","requestURL","accessURL","authorizeURL","sendURL","pages","appName","key","secret","loginCallback","oauth_secrets","oauth","loginAuthen","req","res","console","log","Date","getOAuthRequestToken","error","token","tokenSecret","results","redirect","callback","query","parse","url","oauth_token","verifier","oauth_verifier","getOAuthAccessToken","accessToken","accessTokenSecret","getProtectedResource","data","respond","dataJ","JSON","sendData","app_id","id","username","fullName","idBoards","resData"],"mappings":"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","file":"login.js","sourcesContent":["import http from 'http'\r\nconst OAuth = require('oauth').OAuth\r\nimport url from 'url'\r\nimport { havedata } from './members'\r\n\r\nconst requestURL = \"https://trello.com/1/OAuthGetRequestToken\"\r\nconst accessURL = \"https://trello.com/1/OAuthGetAccessToken\"\r\nconst authorizeURL = \"https://trello.com/1/OAuthAuthorizeToken\"\r\nconst sendURL = \"https://facebook.com\"\r\nconst pages = \"mebooksthailand\"\r\nconst appName = \"CFDrello Dashboard\"\r\n\r\nconst key = \"662fa775f48bd56cea11e8be634da284\"\r\nconst secret = \"8e3dd310f5a5a5e8757563ecc30d992664d895abc296441bfc1cf515ffdefa51\"\r\n\r\nconst loginCallback = \"http://localhost:7777/callback\"\r\nconst oauth_secrets = {}\r\n\r\nconst oauth = new OAuth(requestURL, accessURL, key, secret, \"1.0A\", loginCallback, \"HMAC-SHA1\")\r\n\r\nexport const loginAuthen = async (req,res) => {\r\n    console.log(`GET '/login' ðŸ¤  ${Date()}`)\r\n    oauth.getOAuthRequestToken((error, token, tokenSecret, results) => {\r\n        console.log(`in getOAuthRequestToken - token: ${token}, tokenSecret: ${tokenSecret}, resultes ${JSON.stringify(results)}, error: ${JSON.stringify(error)}`)\r\n        oauth_secrets[token] = tokenSecret\r\n        res.redirect(`${authorizeURL}?oauth_token=${token}&name=${appName}&expiration=never`)\r\n    });\r\n}\r\n\r\nexport const callback = async (req, res) => {\r\n    const query = url.parse(req.url, true).query\r\n    const token = query.oauth_token\r\n    const tokenSecret = oauth_secrets[token]\r\n    const verifier = query.oauth_verifier\r\n    oauth.getOAuthAccessToken(token, tokenSecret, verifier, async (error, accessToken, accessTokenSecret, results) => {\r\n        console.log(`in getOAuthAccessToken - accessToken: ${accessToken}, accessTokenSecret: ${accessTokenSecret}, error: ${error}`)\r\n        if(error)\r\n            res.redirect(`${sendURL}/${pages}`)\r\n        oauth.getProtectedResource(\"https://api.trello.com/1/members/me\", \"GET\",accessToken, accessTokenSecret, async (error, data, respond) => {\r\n            console.log(`in getProtectedResource - accessToken: ${accessToken}, accessTokenSecret: ${accessTokenSecret}`)\r\n            const dataJ = JSON.parse(data);\r\n            const sendData = {\r\n                app_id: key,\r\n                token: accessToken,\r\n                id: dataJ.id,\r\n                username: dataJ.username,\r\n                fullName: dataJ.fullName,\r\n                idBoards: dataJ.idBoards\r\n            }\r\n            console.log(sendData)\r\n            const resData = await havedata(sendData)\r\n            res.redirect(`${sendURL}/?token=${accessToken}`)\r\n        })\r\n    })\r\n}"]}