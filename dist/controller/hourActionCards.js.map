{"version":3,"sources":["../../src/controller/hourActionCards.js"],"names":["createHourActionCards","data","getYesterday","dataYesterday","today","Date","start","thisDate","find","dateString","actions","findOne","_id","idDashboard","dashboard","listBack","listInpr","listComp","len","length","dataHour","dataBack","dataInpr","dataComp","i","j","d","date","hour","getHours","type","indexOf","list","id","countBack","countInpr","countComp","listAfter","listBefore","card","closed","old","allData","timeHour","hourActionCards","console","log","push","createnewHourActionCards","callHourActionCards","getHourActionCards","DateActionCards","setDate","getDate","yesterday","dateActionCards","split","year","month","day","join","dateY","HourActionCards","create","newHourActionCards","update","$set"],"mappings":"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","file":"hourActionCards.js","sourcesContent":["import {HourActionCards} from '../models/hourActionCards'\r\nimport {Actions} from '../models/actions'\r\nimport {Dashboards} from '../models/dashboards'\r\nimport {DateActionCards} from '../models/dateActionCards'\r\nimport {convertDates} from './convertDates'\r\n\r\nexport const createHourActionCards = async(data) => {\r\n    const dataYesterday = await getYesterday(DateActionCards,data)\r\n    let today = new Date(data.start)\r\n    let thisDate = await convertDates(today)\r\n    const actions =  await Actions.find({dateString: thisDate})\r\n    const dashboard = await Dashboards.findOne({_id: data.idDashboard})\r\n    if(!dashboard)\r\n        return \"Error!! Not found dashboard\"\r\n    const listBack = dashboard.listBack\r\n    const listInpr = dashboard.listInpr\r\n    const listComp = dashboard.listComp\r\n    const len = actions.length\r\n\r\n    let dataHour = []\r\n    let dataBack = []\r\n    let dataInpr = []\r\n    let dataComp = []\r\n\r\n    for (let i = 0; i <= 23; i++) {\r\n        for (let j = 0; j < len; j++){\r\n            const data = actions[j].data\r\n            let d = new Date(actions[j].date)\r\n            let hour = (d.getHours())\r\n            if(i==hour){\r\n                if(actions[j].type==\"createCard\" || actions[j].type==\"moveCardToBoard\"){\r\n                    if (listBack.indexOf(data.list.id) != -1) dataYesterday.countBack++\r\n                    else if (listInpr.indexOf(data.list.id) != -1) dataYesterday.countInpr++\r\n                    else if (listComp.indexOf(data.list.id) != -1) dataYesterday.countComp++\r\n                }\r\n                else if(actions[j].type==\"updateCard\" && data.listAfter && data.listBefore){\r\n                    if (listBack.indexOf(data.listAfter.id) != -1) dataYesterday.countBack++\r\n                    else if (listInpr.indexOf(data.listAfter.id) != -1) dataYesterday.countInpr++\r\n                    else if (listComp.indexOf(data.listAfter.id) != -1) dataYesterday.countComp++\r\n    \r\n                    if (listBack.indexOf(data.listBefore.id) != -1) dataYesterday.countBack--\r\n                    else if (listInpr.indexOf(data.listBefore.id) != -1) dataYesterday.countInpr--\r\n                    else if (listComp.indexOf(data.listBefore.id) != -1) dataYesterday.countComp--\r\n                }\r\n                else if(actions[j].type==\"updateCard\" && data.card.closed == false && data.old.closed == true){ \r\n                    if (listBack.indexOf(data.list.id) != -1) countBack++\r\n                    else if (listInpr.indexOf(data.list.id) != -1) countInpr++\r\n                    else if (listComp.indexOf(data.list.id) != -1) countComp++\r\n                }\r\n                else if(actions[j].type==\"updateCard\" && data.card.closed == true && data.old.closed == false){ \r\n                    if (listBack.indexOf(data.list.id) != -1) countBack--\r\n                    else if (listInpr.indexOf(data.list.id) != -1) countInpr--\r\n                    else if (listComp.indexOf(data.list.id) != -1) countComp--\r\n                }\r\n            }   \r\n        }\r\n        const allData = {\r\n            dateString: thisDate,\r\n            timeHour: i,\r\n            countBack: dataYesterday.countBack,\r\n            countInpr: dataYesterday.countInpr,\r\n            countComp: dataYesterday.countComp,\r\n            idDashboard: dashboard._id\r\n        }\r\n        const hourActionCards = await HourActionCards.findOne({ \r\n            dateString: allData.dateString, \r\n            timeHour: allData.timeHour,\r\n            idDashboard: allData.idDashboard\r\n        })\r\n        console.log(allData)\r\n        dataHour.push(i)\r\n        dataBack.push(allData.countBack)\r\n        dataInpr.push(allData.countInpr)\r\n        dataComp.push(allData.countComp)\r\n\r\n        const callHourActionCards = await createnewHourActionCards(HourActionCards,allData,hourActionCards)\r\n        // if (callHourActionCards)\r\n        //     console.log(\"create or update new HourActionCards complete\")\r\n        // else\r\n        //     console.log(\"have a HourActionCards already!!\")\r\n    }\r\n    const getHourActionCards = {\r\n        dataHour: dataHour,\r\n        dataBack: dataBack,\r\n        dataInpr: dataInpr,\r\n        dataComp: dataComp\r\n    }\r\n    return getHourActionCards\r\n}\r\n\r\nexport const getYesterday = async (DateActionCards,data) => {\r\n    let d = new Date(data.start)\r\n    d.setDate(d.getDate() - 1)\r\n    let yesterday = await convertDates(d)\r\n    console.log(\"yesterday = \"+yesterday)\r\n    let dateActionCards = await DateActionCards.findOne({ dateString: yesterday, idDashboard: data.idDashboard})\r\n    if(!dateActionCards){\r\n        let [year, month, date, day] = yesterday.split('-')\r\n        yesterday = [year, month, date].join('-')\r\n        let dateY = new Date(yesterday)\r\n        dateActionCards = {\r\n            date: dateY,\r\n            dateString: yesterday,\r\n            countBack: 0,\r\n            countInpr: 0,\r\n            countComp: 0,\r\n            idDashboard: data.idDashboard\r\n        }\r\n    }\r\n    return dateActionCards\r\n}\r\n\r\nexport const createnewHourActionCards = async (HourActionCards,allData,hourActionCards) => {\r\n    if (!hourActionCards) {\r\n        const newHourActionCards = await HourActionCards.create(allData)\r\n        return newHourActionCards\r\n    }\r\n    else if (allData.countBack != hourActionCards.countBack || allData.countInpr != hourActionCards.countInpr || allData.countComp != hourActionCards.countComp ) {\r\n        const newHourActionCards = await HourActionCards.update({_id: hourActionCards._id},{$set:{\r\n            countBack: allData.countBack,\r\n            countInpr: allData.countInpr,\r\n            countComp: allData.countComp\r\n        }})\r\n        return newHourActionCards\r\n    } \r\n    else\r\n        return false\r\n}"]}