{"version":3,"sources":["../../src/controller/boards.js"],"names":["checkCreateBoard","inf","len","idBoards","length","t","app_id","token","i","get","err","data","findOne","id","boards","createnewBoards","callcreate","callLists","Boards","create","name","labelNames","newboard","update","$set"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AAEO,IAAMA;AAAA,0EAAmB,kBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACtBC,2BADsB,GACfD,IAAIE,QAAL,CAAeC,MADC;AAExBC,yBAFwB,GAEpB,yBAAWJ,IAAIK,MAAf,EAAuBL,IAAIM,KAA3B,CAFoB;;AAAA,+CAInBC,CAJmB;AAKxBH,8BAAEI,GAAF,CAAM,eAAgBR,IAAIE,QAAL,CAAeK,CAAf,CAArB;AAAA,uGAAwC,iBAAOE,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAChCD,GADgC;AAAA;AAAA;AAAA;;AAAA,0DACrBA,GADqB;;AAAA;AAAA;AAAA,2DAEf,eAAOE,OAAP,CAAe,EAACC,IAAIZ,IAAIE,QAAL,CAAeK,CAAf,CAAJ,EAAf,CAFe;;AAAA;AAE9BM,0DAF8B;AAAA;AAAA,2DAGXC,gCAAuBD,MAAvB,EAA8BH,IAA9B,CAHW;;AAAA;AAG9BK,8DAH8B;AAAA;AAAA,2DAIZ,6BAAiBf,IAAIK,MAArB,EAA6BL,IAAIM,KAAjC,EAAwCN,IAAIE,QAAL,CAAeK,CAAf,CAAvC,CAJY;;AAAA;AAI9BS,6DAJ8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAxC;;AAAA;AAAA;AAAA;AAAA;AALwB;;AAI5B,6BAAST,CAAT,GAAa,CAAb,EAAgBA,IAAIN,GAApB,EAAyBM,GAAzB,EAA8B;AAAA,kCAArBA,CAAqB;AAO7B;;AAX2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAcA,IAAMO;AAAA,2EAAkB,kBAAOG,MAAP,EAAcJ,MAAd,EAAqBH,IAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BACvBG,MADuB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAEAI,OAAOC,MAAP,CAAc;AACjCN,gCAAIF,KAAKE,EADwB;AAEjCO,kCAAMT,KAAKS,IAFsB;AAGjCC,wCAAYV,KAAKU;AAHgB,yBAAd,CAFA;;AAAA;AAEjBC,gCAFiB;AAAA,0DAOhBA,QAPgB;;AAAA;AAAA,8BASlBR,OAAOM,IAAP,IAAeT,KAAKS,IAApB,IAA4B,yBAAeN,OAAOO,UAAtB,KAAqC,yBAAeV,KAAKU,UAApB,CAT/C;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAUAH,OAAOK,MAAP,CAAc,EAACV,IAAIF,KAAKE,EAAV,EAAd,EAA4B,EAACW,MAAK;AACrDJ,sCAAMT,KAAKS,IAD0C;AAErDC,4CAAYV,KAAKU;AAFoC,6BAAN,EAA5B,CAVA;;AAAA;AAUjBC,iCAViB;AAAA,0DAchBA,SAdgB;;AAAA;AAAA,0DAiBhB,KAjBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"boards.js","sourcesContent":["import Trello from 'node-trello'\nimport {Boards} from '../models/boards'\nimport { checkCreateLists } from './lists'\n\nexport const checkCreateBoard = async (inf) => {\n    const len = (inf.idBoards).length\n    let t = new Trello(inf.app_id, inf.token)\n\n    for (let i = 0; i < len; i++) {\n        t.get(\"/1/boards/\" + (inf.idBoards)[i], async (err, data) => {\n            if (err) throw err\n            const boards = await Boards.findOne({id:(inf.idBoards)[i]});\n            const callcreate = await createnewBoards(Boards,boards,data)\n            const callLists = await checkCreateLists(inf.app_id, inf.token,(inf.idBoards)[i])\n        })\n    }\n}\n\nexport const createnewBoards = async (Boards,boards,data) => {\n    if(!boards){\n        const newboard = await Boards.create({\n            id: data.id,\n            name: data.name,\n            labelNames: data.labelNames\n        })\n        return newboard\n    }\n    else if (boards.name != data.name || JSON.stringify(boards.labelNames) != JSON.stringify(data.labelNames)) {\n        const newboard = await Boards.update({id: data.id},{$set:{\n            name: data.name,\n            labelNames: data.labelNames\n        }})\n        return newboard\n    }\n    else\n        return false  \n}"]}