{"version":3,"sources":["../../src/controller/boards.js"],"names":["checkCreateBoard","inf","console","log","len","idBoards","length","t","app_id","token","i","get","err","data","findOne","id","boards","createnewBoards","callcreate","callLists","create","name","labelNames","newboard"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AAEO,IAAMA;AAAA,0EAAmB,kBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC5BC,gCAAQC,GAAR,CAAYF,GAAZ;AACMG,2BAFsB,GAEfH,IAAII,QAAL,CAAeC,MAFC;AAGxBC,yBAHwB,GAGpB,yBAAWN,IAAIO,MAAf,EAAuBP,IAAIQ,KAA3B,CAHoB;;AAAA,+CAKnBC,CALmB;AAMxBH,8BAAEI,GAAF,CAAM,eAAgBV,IAAII,QAAL,CAAeK,CAAf,CAArB;AAAA,uGAAwC,iBAAOE,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAChCD,GADgC;AAAA;AAAA;AAAA;;AAAA,0DACrBA,GADqB;;AAAA;AAAA;AAAA,2DAEf,eAAOE,OAAP,CAAe,EAACC,IAAId,IAAII,QAAL,CAAeK,CAAf,CAAJ,EAAf,CAFe;;AAAA;AAE9BM,0DAF8B;AAAA;AAAA,2DAGXC,gBAAgBD,MAAhB,EAAuBH,IAAvB,CAHW;;AAAA;AAG9BK,8DAH8B;;AAIpC,wDAAIA,UAAJ,EACIhB,QAAQC,GAAR,CAAY,2BAAZ,EADJ,KAGID,QAAQC,GAAR,CAAY,wBAAZ;AAPgC;AAAA,2DAQZ,6BAAiBF,IAAIO,MAArB,EAA6BP,IAAIQ,KAAjC,EAAwCR,IAAII,QAAL,CAAeK,CAAf,CAAvC,CARY;;AAAA;AAQ9BS,6DAR8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAxC;;AAAA;AAAA;AAAA;AAAA;AANwB;;AAK5B,6BAAST,CAAT,GAAa,CAAb,EAAgBA,IAAIN,GAApB,EAAyBM,GAAzB,EAA8B;AAAA,kCAArBA,CAAqB;AAW7B;;AAhB2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAmBA,IAAMO;AAAA,2EAAkB,kBAAOD,MAAP,EAAcH,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACvBG,MADuB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAEA,eAAOI,MAAP,CAAc;AACjCL,gCAAIF,KAAKE,EADwB;AAEjCM,kCAAMR,KAAKQ,IAFsB;AAGjCC,wCAAYT,KAAKS;AAHgB,yBAAd,CAFA;;AAAA;AAEjBC,gCAFiB;AAAA,0DAOhB,IAPgB;;AAAA;AAAA,0DAUhB,KAVgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"boards.js","sourcesContent":["import Trello from 'node-trello'\nimport {Boards} from '../models/boards'\nimport { checkCreateLists } from './lists'\n\nexport const checkCreateBoard = async (inf) => {\n    console.log(inf)\n    const len = (inf.idBoards).length\n    let t = new Trello(inf.app_id, inf.token)\n\n    for (let i = 0; i < len; i++) {\n        t.get(\"/1/boards/\" + (inf.idBoards)[i], async (err, data) => {\n            if (err) throw err\n            const boards = await Boards.findOne({id:(inf.idBoards)[i]});\n            const callcreate = await createnewBoards(boards,data)\n            if (callcreate) \n                console.log(\"create new board complete\");\n            else \n                console.log(\"have a board already!!\");\n            const callLists = await checkCreateLists(inf.app_id, inf.token,(inf.idBoards)[i])\n        })\n    }\n}\n\nexport const createnewBoards = async (boards,data) => {\n    if(!boards){\n        const newboard = await Boards.create({\n            id: data.id,\n            name: data.name,\n            labelNames: data.labelNames\n        })\n        return true\n    }\n    else\n        return false  \n}"]}