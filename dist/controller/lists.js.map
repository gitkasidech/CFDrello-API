{"version":3,"sources":["../../src/controller/lists.js"],"names":["checkCreateLists","app_id","token","idBoard","t","get","err","data","len","length","i","findOne","id","lists","createnewLists","callcreate","console","log","Lists","create","name","newlist","update","$set"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEO,IAAMA;AAAA,0EAAmB,kBAAMC,MAAN,EAAcC,KAAd,EAAqBC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,yBADwB,GACpB,yBAAWH,MAAX,EAAmBC,KAAnB,CADoB;;AAE5BE,0BAAEC,GAAF,CAAM,eAAaF,OAAb,GAAqB,QAA3B;AAAA,mGAAqC,iBAAMG,GAAN,EAAWC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAC7BD,GAD6B;AAAA;AAAA;AAAA;;AAAA,sDAClBA,GADkB;;AAAA;AAE3BE,mDAF2B,GAErBD,KAAKE,MAFgB;AAGzBC,iDAHyB,GAGvB,CAHuB;;AAAA;AAAA,sDAGrBA,IAAEF,GAHmB;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAIT,aAAMG,OAAN,CAAc,EAACC,IAAIL,KAAKG,CAAL,EAAQE,EAAb,EAAd,CAJS;;AAAA;AAIvBC,qDAJuB;AAAA;AAAA,uDAKJC,6BAAqBD,KAArB,EAA4BN,KAAKG,CAAL,CAA5B,CALI;;AAAA;AAKvBK,0DALuB;;AAM7B,oDAAIA,UAAJ,EACIC,QAAQC,GAAR,CAAY,qCAAZ,EADJ,KAGID,QAAQC,GAAR,CAAY,wBAAZ;;AATyB;AAGfP,mDAHe;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAArC;;AAAA;AAAA;AAAA;AAAA;;AAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgBA,IAAMI;AAAA,2EAAiB,kBAAMI,KAAN,EAAYL,KAAZ,EAAmBN,IAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BACrBM,KADqB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAEAK,MAAMC,MAAN,CAAa;AAC/BP,gCAAIL,KAAKK,EADsB;AAE/BQ,kCAAMb,KAAKa,IAFoB;AAG/BjB,qCAASI,KAAKJ;AAHiB,yBAAb,CAFA;;AAAA;AAEhBkB,+BAFgB;AAAA,0DAOfA,OAPe;;AAAA;AAAA,8BASjBR,MAAMO,IAAN,IAAcb,KAAKa,IATF;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAUAF,MAAMI,MAAN,CAAa,EAACV,IAAIL,KAAKK,EAAV,EAAb,EAA2B,EAACW,MAAK;AACnDH,sCAAMb,KAAKa;AADwC,6BAAN,EAA3B,CAVA;;AAAA;AAUhBC,gCAVgB;AAAA,0DAafA,QAbe;;AAAA;AAAA,0DAgBf,KAhBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"lists.js","sourcesContent":["import Trello from 'node-trello'\nimport {Lists} from '../models/lists'\n\nexport const checkCreateLists = async(app_id, token, idBoard) => {\n    let t = new Trello(app_id, token)\n    t.get(\"/1/boards/\"+idBoard+\"/lists\", async(err, data) => {\n        if (err) throw err\n        const len = data.length\n        for(let i=0;i<len;i++){\n            const lists = await Lists.findOne({id: data[i].id});\n            const callcreate = await createnewLists(Lists,lists, data[i])\n            if (callcreate)\n                console.log(\"create or update new lists complete\");\n            else\n                console.log(\"have a lists already!!\");\n        } \n    })\n}\n\nexport const createnewLists = async(Lists,lists, data) => {\n    if (!lists) {\n        const newlist = await Lists.create({\n            id: data.id,\n            name: data.name,\n            idBoard: data.idBoard\n        })\n        return newlist\n    }\n    else if (lists.name != data.name) {\n        const newlist = await Lists.update({id: data.id},{$set:{\n            name: data.name\n        }})\n        return newlist\n    } \n    else\n        return false\n}"]}