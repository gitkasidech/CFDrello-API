{"version":3,"sources":["../../src/controller/lists.js"],"names":["setRoute","app","post","havedata","req","res","next","console","log","body","checkreq","callcheckreq","status","send","findOne","id","lists","createnewLists","callcreate","json","createLists","name","idBoard","create","newlists"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAEO,IAAMA;AAAA,0EAAW,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AACpBA,4BAAIC,IAAJ,CAAS,QAAT,EAAmBC,QAAnB;;AADoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;AAGA,IAAMA;AAAA,2EAAW,kBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,gCAAQC,GAAR,CAAYJ,IAAIK,IAAhB;AADoB;AAAA,+BAEOC,SAASN,IAAIK,IAAb,CAFP;;AAAA;AAEdE,oCAFc;;AAGpBJ,gCAAQC,GAAR,CAAYG,YAAZ;;AAHoB,6BAIhBA,YAJgB;AAAA;AAAA;AAAA;;AAAA,0DAKTN,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB,CALS;;AAAA;AAAA;AAAA,+BAQA,aAAMC,OAAN,CAAc,EAAEC,IAAIX,IAAIK,IAAJ,CAASM,EAAf,EAAd,CARA;;AAAA;AAQdC,6BARc;;AASpBT,gCAAQC,GAAR,CAAYQ,KAAZ;;AAToB;AAAA,+BAWKC,eAAeD,KAAf,EAAsBZ,IAAIK,IAA1B,CAXL;;AAAA;AAWdS,kCAXc;;AAYpB,4BAAIA,UAAJ,EAAgB;AACZX,oCAAQC,GAAR,CAAY,2BAAZ;AACA;AACAH,gCAAIc,IAAJ,CAAS;AACLC,6CAAa,IADR;AAELL,oCAAIX,IAAIK,IAAJ,CAASM,EAFR;AAGLM,sCAAMjB,IAAIK,IAAJ,CAASY,IAHV;AAILC,yCAASlB,IAAIK,IAAJ,CAASa;AAJb,6BAAT;AAMH,yBATD,MAUK;AACDf,oCAAQC,GAAR,CAAY,sBAAZ;AACA;AACAH,gCAAIc,IAAJ,CAAS;AACLC,6CAAa,KADR;AAELL,oCAAIX,IAAIK,IAAJ,CAASM,EAFR;AAGLM,sCAAMjB,IAAIK,IAAJ,CAASY,IAHV;AAILC,yCAASlB,IAAIK,IAAJ,CAASa;AAJb,6BAAT;AAMH;;AA/BmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;AAiCA,IAAMZ,8BAAW,SAAXA,QAAW,CAACD,IAAD,EAAU;AAC9B,QAAI,CAACA,KAAKM,EAAN,IAAY,CAACN,KAAKY,IAAlB,IAA0B,CAACZ,KAAKa,OAApC,EAA6C;AACzC,eAAO,IAAP;AACH,KAFD,MAGK;AACD,eAAO,KAAP;AACH;AACJ,CAPM;AAQA,IAAML;AAAA,2EAAiB,kBAAOD,KAAP,EAAcP,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACrBO,KADqB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAEC,aAAMO,MAAN,CAAa;AAChCR,gCAAIN,KAAKM,EADuB;AAEhCM,kCAAMZ,KAAKY,IAFqB;AAGhCC,qCAASb,KAAKa;AAHkB,yBAAb,CAFD;;AAAA;AAEhBE,gCAFgB;AAAA,0DAOf,IAPe;;AAAA;AAAA,0DAUf,KAVe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"lists.js","sourcesContent":["import { Lists } from '../models/lists' \n\nexport const setRoute = async (app) => {\n    app.post('/lists', havedata);\n}\nexport const havedata = async (req, res, next) => {\n    console.log(req.body)\n    const callcheckreq = await checkreq(req.body);\n    console.log(callcheckreq)\n    if (callcheckreq) {\n        return res.status(500).send(\"format should be\")\n    }\n\n    const lists = await Lists.findOne({ id: req.body.id });\n    console.log(lists)\n\n    const callcreate = await createnewLists(lists, req.body);\n    if (callcreate) {\n        console.log(\"create new lists complete\");\n        //add to sprint 2 query data\n        res.json({\n            createLists: true,\n            id: req.body.id,\n            name: req.body.name,\n            idBoard: req.body.idBoard\n        });\n    }\n    else {\n        console.log(\"have lists already!!\");\n        //add to sprint 2 query data\n        res.json({\n            createLists: false,\n            id: req.body.id,\n            name: req.body.name,\n            idBoard: req.body.idBoard\n        });\n    }\n}\nexport const checkreq = (body) => {\n    if (!body.id || !body.name || !body.idBoard) {\n        return true\n    }\n    else {\n        return false\n    }\n}\nexport const createnewLists = async (lists, body) => {\n    if (!lists) {\n        const newlists = await Lists.create({\n            id: body.id,\n            name: body.name,\n            idBoard: body.idBoard\n        })\n        return true\n    }\n    else {\n        return false\n    }\n}"]}