{"version":3,"sources":["../../src/controller/lists.js"],"names":["checkCreateLists","app_id","token","idBoard","t","get","err","data","len","length","i","findOne","id","lists","console","log","createnewLists","callcreate","create","name","newlist"],"mappings":";;;;;;;;;;;;;;;AAOA;;;;AACA;;;;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AAIO,IAAMA;AAAA,0EAAmB,kBAAMC,MAAN,EAAcC,KAAd,EAAqBC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,yBADwB,GACpB,yBAAWH,MAAX,EAAmBC,KAAnB,CADoB;;AAE5BE,0BAAEC,GAAF,CAAM,eAAaF,OAAb,GAAqB,QAA3B;AAAA,mGAAqC,iBAAMG,GAAN,EAAWC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAC7BD,GAD6B;AAAA;AAAA;AAAA;;AAAA,sDAClBA,GADkB;;AAAA;AAE3BE,mDAF2B,GAErBD,KAAKE,MAFgB;AAGzBC,iDAHyB,GAGvB,CAHuB;;AAAA;AAAA,sDAGrBA,IAAEF,GAHmB;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAIT,aAAMG,OAAN,CAAc,EAACC,IAAIL,KAAKG,CAAL,EAAQE,EAAb,EAAd,CAJS;;AAAA;AAIvBC,qDAJuB;;AAK7BC,wDAAQC,GAAR,CAAYR,KAAKG,CAAL,EAAQE,EAApB;AACAE,wDAAQC,GAAR,CAAYF,KAAZ;AAN6B;AAAA,uDAOJG,eAAeH,KAAf,EAAsBN,KAAKG,CAAL,CAAtB,CAPI;;AAAA;AAOvBO,0DAPuB;;AAQ7B,oDAAIA,UAAJ,EACIH,QAAQC,GAAR,CAAY,2BAAZ,EADJ,KAGID,QAAQC,GAAR,CAAY,wBAAZ;;AAXyB;AAGfL,mDAHe;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAArC;;AAAA;AAAA;AAAA;AAAA;;AAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAkBA,IAAMM;AAAA,2EAAiB,kBAAMH,KAAN,EAAaN,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACrBM,KADqB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAEA,aAAMK,MAAN,CAAa;AAC/BN,gCAAIL,KAAKK,EADsB;AAE/BO,kCAAMZ,KAAKY,IAFoB;AAG/BhB,qCAASI,KAAKJ;AAHiB,yBAAb,CAFA;;AAAA;AAEhBiB,+BAFgB;AAAA,0DAOf,IAPe;;AAAA;AAAA,0DASf,KATe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"lists.js","sourcesContent":["// const Trello = require(\"node-trello\");\n// const t = new Trello(\"0c0448fe0859bc978758a937fea22dc5\", \"e5038d4cb3e3c43f2d9c5a340cc9728354cd7c7184eaecb02a8bdc38b7f6c96d\");\n// let idBoards = \"583fec9f1b0bf4ea049ecebd\"\n// t.get(\"/1/boards/\"+idBoards+\"/lists\",(err, data) =>{\n//   if (err) throw err;\n//   console.log(data.length);\n// });\nimport Trello from 'node-trello'\nimport {Lists} from '../models/lists'\n\nexport const checkCreateLists = async(app_id, token, idBoard) => {\n    let t = new Trello(app_id, token)\n    t.get(\"/1/boards/\"+idBoard+\"/lists\", async(err, data) => {\n        if (err) throw err\n        const len = data.length\n        for(let i=0;i<len;i++){\n            const lists = await Lists.findOne({id: data[i].id});\n            console.log(data[i].id)\n            console.log(lists)\n            const callcreate = await createnewLists(lists, data[i])\n            if (callcreate)\n                console.log(\"create new lists complete\");\n            else\n                console.log(\"have a lists already!!\");\n        } \n    })\n}\n\nexport const createnewLists = async(lists, data) => {\n    if (!lists) {\n        const newlist = await Lists.create({\n            id: data.id,\n            name: data.name,\n            idBoard: data.idBoard\n        })\n        return true\n    } else\n        return false\n}"]}