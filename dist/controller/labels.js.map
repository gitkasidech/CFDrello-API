{"version":3,"sources":["../../src/controller/labels.js"],"names":["checkCreateLabels","board","key","token","t","get","err","data","len","length","i","findOne","id","labels","createnewLabels","callLabels","Labels","create","name","color","uses","idBoard","newlabels","update","$set"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEO,IAAMA;AAAA,0EAAoB,kBAAOC,KAAP,EAAaC,GAAb,EAAiBC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,yBADyB,GACrB,yBAAWF,GAAX,EAAeC,KAAf,CADqB;;AAE7BC,0BAAEC,GAAF,CAAM,eAAeJ,KAAf,GAAuB,SAA7B;AAAA,mGAAwC,iBAAOK,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAChCD,GADgC;AAAA;AAAA;AAAA;;AAAA,sDACrBA,GADqB;;AAAA;AAE9BE,mDAF8B,GAExBD,KAAKE,MAFmB;AAG3BC,iDAH2B,GAGvB,CAHuB;;AAAA;AAAA,sDAGpBA,IAAIF,GAHgB;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAIX,eAAOG,OAAP,CAAe,EAACC,IAAIL,KAAKG,CAAL,CAAD,CAAUE,EAAd,EAAf,CAJW;;AAAA;AAI1BC,sDAJ0B;AAAA;AAAA,uDAKPC,gCAAuBD,MAAvB,EAA8BN,KAAKG,CAAL,CAA9B,CALO;;AAAA;AAK1BK,0DAL0B;;AAAA;AAGXL,mDAHW;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAxC;;AAAA;AAAA;AAAA;AAAA;;AAF6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAYA,IAAMI;AAAA,2EAAkB,kBAAME,MAAN,EAAaH,MAAb,EAAoBN,IAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BACtBM,MADsB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAECG,OAAOC,MAAP,CAAc;AAClCL,gCAAIL,KAAKK,EADyB;AAElCM,kCAAMX,KAAKW,IAFuB;AAGlCC,mCAAOZ,KAAKY,KAHsB;AAIlCC,kCAAMb,KAAKa,IAJuB;AAKlCC,qCAASd,KAAKc;AALoB,yBAAd,CAFD;;AAAA;AAEjBC,iCAFiB;AAAA,0DAShBA,SATgB;;AAAA;AAAA,8BAWlBT,OAAOK,IAAP,IAAeX,KAAKW,IAApB,IAA4BL,OAAOM,KAAP,IAAgBZ,KAAKY,KAAjD,IAA0DN,OAAOO,IAAP,IAAeb,KAAKa,IAX5D;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAYCJ,OAAOO,MAAP,CAAc,EAACX,IAAIL,KAAKK,EAAV,EAAd,EAA4B,EAACY,MAAK;AACtDN,sCAAMX,KAAKW,IAD2C;AAEtDC,uCAAOZ,KAAKY,KAF0C;AAGtDC,sCAAMb,KAAKa;AAH2C,6BAAN,EAA5B,CAZD;;AAAA;AAYjBE,kCAZiB;AAAA,0DAiBhBA,UAjBgB;;AAAA;AAAA,0DAoBhB,KApBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"labels.js","sourcesContent":["import Trello from 'node-trello'\nimport {Labels} from '../models/labels'\n\nexport const checkCreateLabels = async (board,key,token) => {\n    let t = new Trello(key,token)\n    t.get(\"/1/boards/\" + board + \"/labels\", async (err, data) => {\n        if (err) throw err\n        const len = data.length\n        for (let i = 0; i < len; i++){\n            const labels = await Labels.findOne({id:(data[i]).id})\n            const callLabels = await createnewLabels(Labels,labels,data[i])\n        }  \n    })   \n}\n\nexport const createnewLabels = async(Labels,labels,data) => {\n    if (!labels) {\n        const newlabels = await Labels.create({\n            id: data.id,\n            name: data.name,\n            color: data.color,\n            uses: data.uses,\n            idBoard: data.idBoard\n        })\n        return newlabels\n    }\n    else if (labels.name != data.name || labels.color != data.color || labels.uses != data.uses) {\n        const newlabels = await Labels.update({id: data.id},{$set:{\n            name: data.name,\n            color: data.color,\n            uses: data.uses\n        }})\n        return newlabels\n    } \n    else\n        return false\n}\n\n\n\n"]}