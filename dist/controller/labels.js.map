{"version":3,"sources":["../../src/controller/labels.js"],"names":["checkCreateLabels","board","key","token","t","get","err","data","len","length","i","findOne","id","labels","createnewLabels","callLabels","console","log","Labels","create","name","color","uses","idBoard","newlabels","update","$set"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEO,IAAMA;AAAA,0EAAoB,kBAAOC,KAAP,EAAaC,GAAb,EAAiBC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,yBADyB,GACrB,yBAAWF,GAAX,EAAeC,KAAf,CADqB;;AAE7BC,0BAAEC,GAAF,CAAM,eAAeJ,KAAf,GAAuB,SAA7B;AAAA,mGAAwC,iBAAOK,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAChCD,GADgC;AAAA;AAAA;AAAA;;AAAA,sDACrBA,GADqB;;AAAA;AAE9BE,mDAF8B,GAExBD,KAAKE,MAFmB;AAG3BC,iDAH2B,GAGvB,CAHuB;;AAAA;AAAA,sDAGpBA,IAAIF,GAHgB;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAIX,eAAOG,OAAP,CAAe,EAACC,IAAIL,KAAKG,CAAL,CAAD,CAAUE,EAAd,EAAf,CAJW;;AAAA;AAI1BC,sDAJ0B;AAAA;AAAA,uDAKPC,gCAAuBD,MAAvB,EAA8BN,KAAKG,CAAL,CAA9B,CALO;;AAAA;AAK1BK,0DAL0B;;AAMhC,oDAAIA,UAAJ,EACIC,QAAQC,GAAR,CAAY,qCAAZ,EADJ,KAGID,QAAQC,GAAR,CAAY,wBAAZ;;AAT4B;AAGXP,mDAHW;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAxC;;AAAA;AAAA;AAAA;AAAA;;AAF6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgBA,IAAMI;AAAA,2EAAkB,kBAAMI,MAAN,EAAaL,MAAb,EAAoBN,IAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BACtBM,MADsB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAECK,OAAOC,MAAP,CAAc;AAClCP,gCAAIL,KAAKK,EADyB;AAElCQ,kCAAMb,KAAKa,IAFuB;AAGlCC,mCAAOd,KAAKc,KAHsB;AAIlCC,kCAAMf,KAAKe,IAJuB;AAKlCC,qCAAShB,KAAKgB;AALoB,yBAAd,CAFD;;AAAA;AAEjBC,iCAFiB;AAAA,0DAShBA,SATgB;;AAAA;AAAA,8BAWlBX,OAAOO,IAAP,IAAeb,KAAKa,IAApB,IAA4BP,OAAOQ,KAAP,IAAgBd,KAAKc,KAAjD,IAA0DR,OAAOS,IAAP,IAAef,KAAKe,IAX5D;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAYCJ,OAAOO,MAAP,CAAc,EAACb,IAAIL,KAAKK,EAAV,EAAd,EAA4B,EAACc,MAAK;AACtDN,sCAAMb,KAAKa,IAD2C;AAEtDC,uCAAOd,KAAKc,KAF0C;AAGtDC,sCAAMf,KAAKe;AAH2C,6BAAN,EAA5B,CAZD;;AAAA;AAYjBE,kCAZiB;AAAA,0DAiBhBA,UAjBgB;;AAAA;AAAA,0DAoBhB,KApBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"labels.js","sourcesContent":["import Trello from 'node-trello'\r\nimport {Labels} from '../models/labels'\r\n\r\nexport const checkCreateLabels = async (board,key,token) => {\r\n    let t = new Trello(key,token)\r\n    t.get(\"/1/boards/\" + board + \"/labels\", async (err, data) => {\r\n        if (err) throw err\r\n        const len = data.length\r\n        for (let i = 0; i < len; i++){\r\n            const labels = await Labels.findOne({id:(data[i]).id})\r\n            const callLabels = await createnewLabels(Labels,labels,data[i])\r\n            if (callLabels) \r\n                console.log(\"create or update new label complete\")\r\n            else \r\n                console.log(\"have a label already!!\")\r\n        }  \r\n    })   \r\n}\r\n\r\nexport const createnewLabels = async(Labels,labels,data) => {\r\n    if (!labels) {\r\n        const newlabels = await Labels.create({\r\n            id: data.id,\r\n            name: data.name,\r\n            color: data.color,\r\n            uses: data.uses,\r\n            idBoard: data.idBoard\r\n        })\r\n        return newlabels\r\n    }\r\n    else if (labels.name != data.name || labels.color != data.color || labels.uses != data.uses) {\r\n        const newlabels = await Labels.update({id: data.id},{$set:{\r\n            name: data.name,\r\n            color: data.color,\r\n            uses: data.uses\r\n        }})\r\n        return newlabels\r\n    } \r\n    else\r\n        return false\r\n}\r\n\r\n\r\n\r\n"]}