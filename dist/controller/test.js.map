{"version":3,"sources":["../../src/controller/test.js"],"names":["express","require","http","OAuth","url","requestURL","accessURL","authorizeURL","appName","key","process","env","TRELLO_KEY","secret","TRELLO_OAUTH_SECRET","loginCallback","oauth_secrets","oauth","login","req","res","getOAuthRequestToken","error","token","tokenSecret","results","redirect","callback","request","response","query","parse","oauth_token","verifier","oauth_verifier","getOAuthAccessToken","accessToken","accessTokenSecret","console","log","getProtectedResource","data","send","app","get","Date"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;;AAEA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,QAAQF,QAAQ,OAAR,EAAiBE,KAA7B;AACA,IAAIC,MAAMH,QAAQ,KAAR,CAAV;;AAEA;;;AAGA,IAAMI,aAAa,2CAAnB;AACA,IAAMC,YAAY,0CAAlB;AACA,IAAMC,eAAe,0CAArB;AACA,IAAMC,UAAU,sBAAhB;;AAEA;AACA;AACA,IAAMC,MAAMC,QAAQC,GAAR,CAAYC,UAAxB;AACA,IAAMC,SAASH,QAAQC,GAAR,CAAYG,mBAA3B;;AAEA;AACA,IAAMC,gBAAgB,yCAAtB;;AAEA;AACA;AACA,IAAMC,gBAAgB,EAAtB;;AAEA,IAAMC,QAAQ,IAAId,KAAJ,CAAUE,UAAV,EAAsBC,SAAtB,EAAiCG,GAAjC,EAAsCI,MAAtC,EAA8C,MAA9C,EAAsDE,aAAtD,EAAqE,WAArE,CAAd;;AAEA,IAAMG,QAAQ,SAARA,KAAQ,CAASC,GAAT,EAAcC,GAAd,EAAmB;AAChCH,QAAMI,oBAAN,CAA2B,UAASC,KAAT,EAAgBC,KAAhB,EAAuBC,WAAvB,EAAoCC,OAApC,EAA4C;AACrE;AACAT,kBAAcO,KAAd,IAAuBC,WAAvB;AACAJ,QAAIM,QAAJ,CAAgBnB,YAAhB,qBAA4CgB,KAA5C,cAA0Df,OAA1D;AACD,GAJD;AAKA,CAND;;AAQA,IAAImB,WAAW,SAAXA,QAAW,CAASC,OAAT,EAAkBC,QAAlB,EAA4B;AAC1C,MAAMC,QAAQ1B,IAAI2B,KAAJ,CAAUH,QAAQxB,GAAlB,EAAuB,IAAvB,EAA6B0B,KAA3C;AACA,MAAMP,QAAQO,MAAME,WAApB;AACA,MAAMR,cAAcR,cAAcO,KAAd,CAApB;AACA,MAAMU,WAAWH,MAAMI,cAAvB;AACAjB,QAAMkB,mBAAN,CAA0BZ,KAA1B,EAAiCC,WAAjC,EAA8CS,QAA9C,EAAwD,UAASX,KAAT,EAAgBc,WAAhB,EAA6BC,iBAA7B,EAAgDZ,OAAhD,EAAwD;AAC9G;AACAa,YAAQC,GAAR,4CAAqDH,WAArD,6BAAwFC,iBAAxF,iBAAqHf,KAArH;AACAL,UAAMuB,oBAAN,CAA2B,qCAA3B,EAAkE,KAAlE,EAAyEJ,WAAzE,EAAsFC,iBAAtF,EAAyG,UAASf,KAAT,EAAgBmB,IAAhB,EAAsBZ,QAAtB,EAA+B;AACtI;AACAS,cAAQC,GAAR,6CAAsDH,WAAtD,6BAAyFC,iBAAzF;AACAR,eAASa,IAAT,CAAcD,IAAd;AACD,KAJD;AAKD,GARD;AASA,CAdD;;AAiBA;;;AAGAE,IAAIC,GAAJ,CAAQ,GAAR,EAAa,UAAUhB,OAAV,EAAmBC,QAAnB,EAA6B;AACzCS,UAAQC,GAAR,6BAA0BM,MAA1B;AACAhB,WAASa,IAAT,CAAc,kEAAd;AACA,CAHD;;AAKAC,IAAIC,GAAJ,CAAQ,QAAR,EAAkB,UAAUhB,OAAV,EAAmBC,QAAnB,EAA6B;AAC9CS,UAAQC,GAAR,kCAA+BM,MAA/B;AACA3B,QAAMU,OAAN,EAAeC,QAAf;AACA,CAHD;;AAKAc,IAAIC,GAAJ,CAAQ,WAAR,EAAqB,UAAUhB,OAAV,EAAmBC,QAAnB,EAA6B;AACjDS,UAAQC,GAAR,qCAAkCM,MAAlC;AACAlB,WAASC,OAAT,EAAkBC,QAAlB;AACA,CAHD","file":"test.js","sourcesContent":["var express = require('express');\r\n\r\nvar http = require('http')\r\nvar OAuth = require('oauth').OAuth\r\nvar url = require('url')\r\n\r\n/*\r\n/     OAuth Setup and Functions\r\n*/\r\nconst requestURL = \"https://trello.com/1/OAuthGetRequestToken\";\r\nconst accessURL = \"https://trello.com/1/OAuthGetAccessToken\";\r\nconst authorizeURL = \"https://trello.com/1/OAuthAuthorizeToken\";\r\nconst appName = \"Trello OAuth Example\";\r\n\r\n// Be sure to include your key and secret in üóù.env ‚ÜñÔ∏è over there.\r\n// You can get your key and secret from Trello at: https://trello.com/app-key\r\nconst key = process.env.TRELLO_KEY;\r\nconst secret = process.env.TRELLO_OAUTH_SECRET;\r\n\r\n// Trello redirects the user here after authentication\r\nconst loginCallback = \"https://trello-oauth.glitch.me/callback\";\r\n\r\n// You should have {\"token\": \"tokenSecret\"} pairs in a real application\r\n// Storage should be more permanent (redis would be a good choice)\r\nconst oauth_secrets = {};\r\n\r\nconst oauth = new OAuth(requestURL, accessURL, key, secret, \"1.0A\", loginCallback, \"HMAC-SHA1\")\r\n\r\nconst login = function(req, res) {\r\n oauth.getOAuthRequestToken(function(error, token, tokenSecret, results){\r\n   // console.log(`in getOAuthRequestToken - token: ${token}, tokenSecret: ${tokenSecret}, resultes ${JSON.stringify(results)}, error: ${JSON.stringify(error)}`);\r\n   oauth_secrets[token] = tokenSecret;\r\n   res.redirect(`${authorizeURL}?oauth_token=${token}&name=${appName}`);\r\n });\r\n};\r\n\r\nvar callback = function(request, response) {\r\n const query = url.parse(request.url, true).query;\r\n const token = query.oauth_token;\r\n const tokenSecret = oauth_secrets[token];\r\n const verifier = query.oauth_verifier;\r\n oauth.getOAuthAccessToken(token, tokenSecret, verifier, function(error, accessToken, accessTokenSecret, results){\r\n   // In a real app, the accessToken and accessTokenSecret should be stored\r\n   console.log(`in getOAuthAccessToken - accessToken: ${accessToken}, accessTokenSecret: ${accessTokenSecret}, error: ${error}`);\r\n   oauth.getProtectedResource(\"https://api.trello.com/1/members/me\", \"GET\", accessToken, accessTokenSecret, function(error, data, response){\r\n     // Now we can respond with data to show that we have access to your Trello account via OAuth\r\n     console.log(`in getProtectedResource - accessToken: ${accessToken}, accessTokenSecret: ${accessTokenSecret}`);\r\n     response.send(data)\r\n   });\r\n });\r\n};\r\n\r\n\r\n/*\r\n/     Routes\r\n*/\r\napp.get(\"/\", function (request, response) {\r\n console.log(`GET '/' ü§† ${Date()}`);\r\n response.send(\"<h1>Oh, hello there!</h1><a href='./login'>Login with OAuth!</a>\");\r\n});\r\n\r\napp.get(\"/login\", function (request, response) {\r\n console.log(`GET '/login' ü§† ${Date()}`);\r\n login(request, response);\r\n});\r\n\r\napp.get(\"/callback\", function (request, response) {\r\n console.log(`GET '/callback' ü§† ${Date()}`);\r\n callback(request, response);\r\n});"]}