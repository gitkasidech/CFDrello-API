{"version":3,"sources":["../../src/controller/cards.js"],"names":["checkCreateCards","board","key","token","t","get","err","data","len","length","i","findOne","id","cards","createnewCards","callCards","Cards","create","name","idBoard","idList","idMembers","idLabels","newcards","update","$set"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEO,IAAMA;AAAA,0EAAmB,kBAAMC,KAAN,EAAYC,GAAZ,EAAgBC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,yBADwB,GACpB,yBAAWF,GAAX,EAAeC,KAAf,CADoB;;AAE5BC,0BAAEC,GAAF,CAAM,eAAeJ,KAAf,GAAuB,YAA7B;AAAA,mGAA2C,iBAAOK,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACnCD,GADmC;AAAA;AAAA;AAAA;;AAAA,sDACxBA,GADwB;;AAAA;AAEjCE,mDAFiC,GAE3BD,KAAKE,MAFsB;AAG9BC,iDAH8B,GAG1B,CAH0B;;AAAA;AAAA,sDAGvBA,IAAIF,GAHmB;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAIf,aAAMG,OAAN,CAAc,EAACC,IAAIL,KAAKG,CAAL,CAAD,CAAUE,EAAd,EAAd,CAJe;;AAAA;AAI7BC,qDAJ6B;AAAA;AAAA,uDAKXC,6BAAqBD,KAArB,EAA2BN,KAAKG,CAAL,CAA3B,CALW;;AAAA;AAK7BK,yDAL6B;;AAAA;AAGdL,mDAHc;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA3C;;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5B4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA+BA,IAAMI;AAAA,2EAAiB,kBAAME,KAAN,EAAYH,KAAZ,EAAkBN,IAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BACrBM,KADqB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAECG,MAAMC,MAAN,CAAa;AAChCL,gCAAIL,KAAKK,EADuB;AAEhCM,kCAAMX,KAAKW,IAFqB;AAGhCC,qCAASZ,KAAKY,OAHkB;AAIhCC,oCAAQb,KAAKa,MAJmB;AAKhCC,uCAAWd,KAAKc,SALgB;AAMhCC,sCAAUf,KAAKe;AANiB,yBAAb,CAFD;;AAAA;AAEhBC,gCAFgB;AAAA,0DAUfA,QAVe;;AAAA;AAAA,8BAYjBV,MAAMK,IAAN,IAAcX,KAAKW,IAAnB,IAA2BL,MAAMO,MAAN,IAAgBb,KAAKa,MAAhD,IAA0D,yBAAeP,MAAMQ,SAArB,KAAmC,yBAAed,KAAKc,SAApB,CAA7F,IAA+H,yBAAeR,MAAMS,QAArB,KAAkC,yBAAef,KAAKe,QAApB,CAZhJ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAaCN,MAAMQ,MAAN,CAAa,EAACZ,IAAIL,KAAKK,EAAV,EAAb,EAA2B,EAACa,MAAK;AACpDP,sCAAMX,KAAKW,IADyC;AAEpDE,wCAAQb,KAAKa,MAFuC;AAGpDC,2CAAWd,KAAKc,SAHoC;AAIpDC,0CAAUf,KAAKe;AAJqC,6BAAN,EAA3B,CAbD;;AAAA;AAahBC,iCAbgB;AAAA,0DAmBfA,SAnBe;;AAAA;AAAA,0DAsBf,KAtBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"cards.js","sourcesContent":["import Trello from 'node-trello'\nimport request from 'request'\nimport Promise from 'bluebird'\nimport {Cards} from '../models/cards'\n\nexport const checkCreateCards = async(board,key,token) => {\n    let t = new Trello(key,token)\n    t.get(\"/1/boards/\" + board + \"/cards/all\", async (err, data) => {\n        if (err) throw err\n        const len = data.length\n        for (let i = 0; i < len; i++){\n            const cards = await Cards.findOne({id:(data[i]).id})\n            const callCards = await createnewCards(Cards,cards,data[i])\n        }  \n    })\n    // console.log(sinceDate)\n    // console.log(beforeDate)\n    // return new Promise((resolve, reject) => {\n    //     request({\n    //         uri: 'https://api.trello.com/1/board/'+board+'/cards/?fields=id,name,idBoard,idList,idMembers,idLabels&since='+sinceDate+'&before='+beforeDate+'&limit=1000&key='+key+'&token='+token,\n    //         method: 'GET'\n    //     }, (err, response, body) =>{\n    //         if (err) reject(JSON.stringify(err))\n    //         console.log(body)\n    //         resolve(body)\n    //     })\n    // }).then(async (data) => {\n    //         data = JSON.parse(data)\n    //         const len = data.length\n    //         for (let i = 0; i < len; i++) {\n    //             const cards = await Cards.findOne({ id: (data[i]).id })\n    //             const callCards = await createnewCards(Cards,cards, data[i])\n    //         }\n    // })   \n}\n\nexport const createnewCards = async(Cards,cards,data) => {\n    if (!cards) {\n        const newcards = await Cards.create({\n            id: data.id,\n            name: data.name,\n            idBoard: data.idBoard,\n            idList: data.idList,\n            idMembers: data.idMembers,\n            idLabels: data.idLabels\n        })\n        return newcards\n    }\n    else if (cards.name != data.name || cards.idList != data.idList || JSON.stringify(cards.idMembers) != JSON.stringify(data.idMembers) || JSON.stringify(cards.idLabels) != JSON.stringify(data.idLabels)) {\n        const newcards = await Cards.update({id: data.id},{$set:{\n            name: data.name,\n            idList: data.idList,\n            idMembers: data.idMembers,\n            idLabels: data.idLabels\n        }})\n        return newcards\n    } \n    else\n        return false\n}"]}