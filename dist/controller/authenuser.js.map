{"version":3,"sources":["../../src/controller/authenuser.js"],"names":["setRoute","app","post","havedata","req","res","next","console","log","body","checkreq","callcheckreq","status","send","users","findOne","idUser","id","user","createnewUser","callcreate","json","canAccessDashboard","token","username","create","fullname","newuser"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAAmD;;AAE5C,IAAMA;AAAA,0EAAW,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AACpBA,4BAAIC,IAAJ,CAAS,aAAT,EAAwBC,QAAxB;;AADoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;AAKA,IAAMA;AAAA,2EAAW,kBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB;AACA;AACAC,gCAAQC,GAAR,CAAYJ,IAAIK,IAAhB;AAHoB;AAAA,+BAIOC,SAASN,IAAIK,IAAb,CAJP;;AAAA;AAIdE,oCAJc;;AAKpBJ,gCAAQC,GAAR,CAAYG,YAAZ;;AALoB,6BAMhBA,YANgB;AAAA;AAAA;AAAA;;AAAA,0DAOTN,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB,CAPS;;AAAA;AAUdC,6BAVc,GAUN,4BAAgBV,IAAIK,IAApB,CAVM;AAAA;AAAA,+BAWD,wBAAYM,OAAZ,CAAoB,EAAEC,QAAQZ,IAAIK,IAAJ,CAASQ,EAAnB,EAApB,CAXC;;AAAA;AAWdC,4BAXc;AAAA;AAAA,+BAaKC,cAAcD,IAAd,EAAmBd,IAAIK,IAAvB,CAbL;;AAAA;AAadW,kCAbc;;AAcpB,4BAAIA,UAAJ,EAAgB;AACZb,oCAAQC,GAAR,CAAY,0BAAZ;AACAH,gCAAIgB,IAAJ,CAAS,EAAEC,oBAAoB,IAAtB,EAAT;AACH,yBAHD,MAIK;AACDf,oCAAQC,GAAR,CAAY,uBAAZ;AACAH,gCAAIgB,IAAJ,CAAS,EAAEC,oBAAoB,KAAtB,EAAT;AACH;;AArBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;AAuBA,IAAMZ;AAAA,2EAAW,kBAAOD,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,8BAChB,CAACA,KAAKc,KAAN,IAAe,CAACd,KAAKQ,EAArB,IAA2B,CAACR,KAAKe,QADjB;AAAA;AAAA;AAAA;;AAAA,0DAET,IAFS;;AAAA;AAAA,0DAKT,KALS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;AAQA,IAAML;AAAA,2EAAgB,kBAAOD,IAAP,EAAYT,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAGpBS,IAHoB;AAAA;AAAA;AAAA;;AAIfJ,6BAJe,GAIP,4BAAgBL,IAAhB,CAJO;AAAA;AAAA,+BAKC,wBAAYgB,MAAZ,CAAmB;AACrCT,oCAAQP,KAAKQ,EADwB;AAErCO,sCAAUf,KAAKe,QAFsB;AAGrCE,sCAAUjB,KAAKiB,QAHsB;AAIrCH,mCAAOd,KAAKc;AAJyB,yBAAnB,CALD;;AAAA;AAKfI,+BALe;AAAA,0DAWd,IAXc;;AAAA;AAAA,0DAcd,KAdc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"authenuser.js","sourcesContent":["import { AuthenUsers } from '../models/authenuser' //as rename\r\n\r\nexport const setRoute = async (app) => {\r\n    app.post('/authenuser', havedata);\r\n\r\n\r\n}\r\nexport const havedata = async (req, res, next) => {\r\n    // const json = req.body\r\n    // const {idUser, username, fullname, token, email} = json;\r\n    console.log(req.body)\r\n    const callcheckreq = await checkreq(req.body);\r\n    console.log(callcheckreq)\r\n    if (callcheckreq) {\r\n        return res.status(500).send(\"format should be\")\r\n    }\r\n\r\n    const users = new AuthenUsers(req.body);\r\n    const user = await AuthenUsers.findOne({ idUser: req.body.id });\r\n\r\n    const callcreate = await createnewUser(user,req.body);\r\n    if (callcreate) {\r\n        console.log(\"create new user complete\");\r\n        res.json({ canAccessDashboard: true });\r\n    }\r\n    else {\r\n        console.log(\"have a user already!!\");\r\n        res.json({ canAccessDashboard: false });\r\n    }\r\n}\r\nexport const checkreq = async (body) => {\r\n    if (!body.token || !body.id || !body.username) {\r\n        return true\r\n    }\r\n    else {\r\n        return false\r\n    }\r\n}\r\nexport const createnewUser = async (user,body) => {\r\n    // const users = new AuthenUsers(body);\r\n    // const user = await AuthenUsers.findOne({ idUser: body.id });\r\n    if (!user) {\r\n        const users = new AuthenUsers(body);\r\n        const newuser = await AuthenUsers.create({\r\n            idUser: body.id,\r\n            username: body.username,\r\n            fullname: body.fullname,\r\n            token: body.token\r\n        });\r\n        return true\r\n    }\r\n    else {\r\n        return false\r\n    }\r\n}\r\n\r\n// export const authenuserController = async (req, res, next) => {\r\n//         // const json = req.body\r\n//         // const {idUser, username, fullname, token, email} = json;\r\n//         if (!req.body.token||!req.body.idUser||!req.body.username) {\r\n//             res.status(500).send(\"format should be\")\r\n//         }\r\n//         else{\r\n//             const users = new AuthenUser(req.body); \r\n//             const user = await AuthenUser.findOne({idUser: req.body.idUser});\r\n//             if(!user){\r\n//                 const newuser = await AuthenUser.create({\r\n//                 idUser: req.body.idUser,\r\n//                 username: req.body.username,\r\n//                 fullname: req.body.fullname,\r\n//                 token: req.body.token,\r\n//                 email: req.body.email\r\n//             });\r\n//             //res.json(users);\r\n//             console.log(\"add complete\");\r\n//             res.send('<h1>add New dashboard</h1>');\r\n//             }\r\n//             else{\r\n//                 console.log(\"have a user already!!\");\r\n//                 res.send('<h1>dashboard</h1>');\r\n//             }\r\n//         }\r\n\r\n// }\r\n\r\n"]}