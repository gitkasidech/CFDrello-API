{"version":3,"sources":["../../src/controller/dashboards.js"],"names":["saveData","req","res","next","console","log","Date","inf","body","checkInf","callInf","status","send","createnewDashboards","callCreate","json","idDashboard","_id","name","idBoard","listComp","colorComp","listInpr","colorInpr","listBack","colorBack","idMember","Dashboards","create","newDashboards"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAAgD;;AAEzC,IAAMA;AAAA,0EAAW,iBAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,gCAAQC,GAAR,sCAAqCC,MAArC;AACMC,2BAFc,GAERN,IAAIO,IAFI;;AAGpBJ,gCAAQC,GAAR,CAAYE,GAAZ;AAHoB;AAAA,+BAIEE,SAASF,GAAT,CAJF;;AAAA;AAIdG,+BAJc;;AAKpBN,gCAAQC,GAAR,CAAYK,OAAZ;;AALoB,6BAMhBA,OANgB;AAAA;AAAA;AAAA;;AAAA,yDAOTR,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB,CAPS;;AAAA;AAAA;AAAA,+BASKC,4CAAgCN,GAAhC,CATL;;AAAA;AASdO,kCATc;;AAUpBV,gCAAQC,GAAR,CAAY,gCAAZ;AACAD,gCAAQC,GAAR,CAAYS,UAAZ;AACAZ,4BAAIa,IAAJ,CAAS,EAACC,aAAaF,WAAWG,GAAzB,EAAT;;AAZoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAeA,IAAMR,8BAAW,SAAXA,QAAW,CAACF,GAAD,EAAS;AAC7B,QAAI,CAACA,IAAIW,IAAL,IAAa,CAACX,IAAIY,OAAlB,IAA6B,CAACZ,IAAIa,QAAlC,IAA8C,CAACb,IAAIc,SAAnD,IAAgE,CAACd,IAAIe,QAArE,IAAiF,CAACf,IAAIgB,SAAtF,IAAmG,CAAChB,IAAIiB,QAAxG,IAAoH,CAACjB,IAAIkB,SAAzH,IAAsI,CAAClB,IAAImB,QAA/I,EAAyJ;AACrJ,eAAO,IAAP;AACH,KAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ,CANM;;AAQA,IAAMb;AAAA,2EAAsB,kBAAMc,UAAN,EAAkBpB,GAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACHoB,WAAWC,MAAX,CAAkB;AAC1CV,kCAAMX,IAAIW,IADgC;AAE1CC,qCAASZ,IAAIY,OAF6B;AAG1CC,sCAAUb,IAAIa,QAH4B;AAI1CC,uCAAWd,IAAIc,SAJ2B;AAK1CC,sCAAUf,IAAIe,QAL4B;AAM1CC,uCAAWhB,IAAIgB,SAN2B;AAO1CC,sCAAUjB,IAAIiB,QAP4B;AAQ1CC,uCAAWlB,IAAIkB,SAR2B;AAS1CC,sCAAUnB,IAAImB;AAT4B,yBAAlB,CADG;;AAAA;AACzBG,qCADyB;AAAA,0DAYxBA,aAZwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"dashboards.js","sourcesContent":["import {Dashboards} from '../models/dashboards' //as rename\r\n\r\nexport const saveData = async(req, res, next) => {\r\n    console.log(`POST '/dashboards' ðŸ¤  ${Date()}`)\r\n    const inf = req.body\r\n    console.log(inf)\r\n    const callInf = await checkInf(inf);\r\n    console.log(callInf)\r\n    if (callInf)\r\n        return res.status(500).send(\"format should be\")\r\n\r\n    const callCreate = await createnewDashboards(Dashboards, inf);\r\n    console.log(\"create new dashboards complete\");\r\n    console.log(callCreate);\r\n    res.json({idDashboard: callCreate._id})\r\n}\r\n\r\nexport const checkInf = (inf) => {\r\n    if (!inf.name || !inf.idBoard || !inf.listComp || !inf.colorComp || !inf.listInpr || !inf.colorInpr || !inf.listBack || !inf.colorBack || !inf.idMember) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nexport const createnewDashboards = async(Dashboards, inf) => {\r\n    const newDashboards = await Dashboards.create({\r\n        name: inf.name,\r\n        idBoard: inf.idBoard,\r\n        listComp: inf.listComp,\r\n        colorComp: inf.colorComp,\r\n        listInpr: inf.listInpr,\r\n        colorInpr: inf.colorInpr,\r\n        listBack: inf.listBack,\r\n        colorBack: inf.colorBack,\r\n        idMember: inf.idMember\r\n    })\r\n    return newDashboards\r\n}"]}