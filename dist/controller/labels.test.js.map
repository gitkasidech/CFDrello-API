{"version":3,"sources":["../../src/controller/labels.test.js"],"names":["jest","mock","mockLabels","labels","id","name","color","uses","idBoard","test","send","labelsNew","undefined","receive","callRec","getCreate","expect","length","toEqual","getUpdate","rec","toBe"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AAHAA,KAAKC,IAAL,CAAU,WAAV,EAAuB,YAAM,CAAG,CAAhC;;;AAKA,IAAMC,aAAa,sBAAnB;AACA,IAAMC,SAAS;AACXC,QAAI,MADO;AAEXC,UAAM,KAFK;AAGXC,WAAO,KAHI;AAIXC,UAAM,IAJK;AAKXC,aAAS;AALE,CAAf;;AAQAC,KAAK,YAAL,6DAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,wBADS,GACF;AACTN,4BAAI,MADK;AAETC,8BAAM,KAFG;AAGTC,+BAAO,KAHE;AAITC,8BAAM,IAJG;AAKTC,iCAAS;AALA,qBADE;AAQTG,6BARS,GAQGC,SARH;AAAA;AAAA,2BASO,8BAAgBV,UAAhB,EAA2BS,SAA3B,EAAsCD,IAAtC,CATP;;AAAA;AASTG,2BATS;AAUTC,2BAVS,GAUCZ,WAAWa,SAAX,EAVD;;AAWfC,2BAAOF,QAAQG,MAAf,EAAuBC,OAAvB,CAA+B,CAA/B;;AAXe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAcAT,KAAK,aAAL,6DAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,wBADU,GACH;AACTN,4BAAI,MADK;AAETC,8BAAM,KAFG;AAGTC,+BAAO,KAHE;AAITC,8BAAM,IAJG;AAKTC,iCAAS;AALA,qBADG;AAAA;AAAA,2BAQM,8BAAgBN,UAAhB,EAA2BC,MAA3B,EAAmCO,IAAnC,CARN;;AAAA;AAQVG,2BARU;AASVC,2BATU,GASAZ,WAAWiB,SAAX,EATA;;AAUhBH,2BAAOF,QAAQ,CAAR,CAAP,EAAmBI,OAAnB,CAA2BR,IAA3B;;AAVgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAaAD,KAAK,cAAL,6DAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,wBADW,GACJ;AACTN,4BAAI,MADK;AAETC,8BAAM,KAFG;AAGTC,+BAAO,MAHE;AAITC,8BAAM,IAJG;AAKTC,iCAAS;AALA,qBADI;AAAA;AAAA,2BAQK,8BAAgBN,UAAhB,EAA2BC,MAA3B,EAAmCO,IAAnC,CARL;;AAAA;AAQXG,2BARW;AASXC,2BATW,GASDZ,WAAWiB,SAAX,EATC;;AAUjBH,2BAAOF,QAAQ,CAAR,CAAP,EAAmBI,OAAnB,CAA2BR,IAA3B;;AAViB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAaAD,KAAK,aAAL,6DAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,wBADU,GACH;AACTN,4BAAI,MADK;AAETC,8BAAM,KAFG;AAGTC,+BAAO,KAHE;AAITC,8BAAM,IAJG;AAKTC,iCAAS;AALA,qBADG;AAAA;AAAA,2BAQM,8BAAgBN,UAAhB,EAA2BC,MAA3B,EAAmCO,IAAnC,CARN;;AAAA;AAQVG,2BARU;AASVC,2BATU,GASAZ,WAAWiB,SAAX,EATA;;AAUhBH,2BAAOF,QAAQ,CAAR,CAAP,EAAmBI,OAAnB,CAA2BR,IAA3B;;AAVgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAaAD,KAAK,YAAL,6DAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,wBADS,GACF;AACTN,4BAAI,MADK;AAETC,8BAAM,KAFG;AAGTC,+BAAO,MAHE;AAITC,8BAAM,IAJG;AAKTC,iCAAS;AALA,qBADE;AAAA;AAAA,2BAQO,8BAAgBN,UAAhB,EAA2BC,MAA3B,EAAmCO,IAAnC,CARP;;AAAA;AAQTG,2BARS;AASTC,2BATS,GASCZ,WAAWiB,SAAX,EATD;;AAUfH,2BAAOF,QAAQ,CAAR,CAAP,EAAmBI,OAAnB,CAA2BR,IAA3B;;AAVe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAaAD,KAAK,qBAAL,6DAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,wBADkB,GACX;AACTN,4BAAI,MADK;AAETC,8BAAM,KAFG;AAGTC,+BAAO,KAHE;AAITC,8BAAM,IAJG;AAKTC,iCAAS;AALA,qBADW;AAAA;AAAA,2BAQN,8BAAgBN,UAAhB,EAA2BC,MAA3B,EAAmCO,IAAnC,CARM;;AAAA;AAQlBU,uBARkB;;AASxBJ,2BAAOI,GAAP,EAAYC,IAAZ,CAAiB,KAAjB;;AATwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B","file":"labels.test.js","sourcesContent":["jest.mock('../models', () => { })\r\nimport mongoose from 'mongoose'\r\nimport MockLabels from 'labels'\r\nimport { createnewLabels } from './labels'\r\n\r\nconst mockLabels = new MockLabels()\r\nconst labels = {\r\n    id: \"123a\",\r\n    name: \"xxx\",\r\n    color: \"red\",\r\n    uses: \"10\",\r\n    idBoard: \"456z\"\r\n}\r\n\r\ntest('new labels', async () => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        color: \"red\",\r\n        uses: \"10\",\r\n        idBoard: \"456z\"\r\n    }\r\n    const labelsNew = undefined\r\n    const receive = await createnewLabels(mockLabels,labelsNew, send)\r\n    const callRec = mockLabels.getCreate()\r\n    expect(callRec.length).toEqual(1)\r\n});\r\n\r\ntest('update name', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"yyy\",\r\n        color: \"red\",\r\n        uses: \"10\",\r\n        idBoard: \"456z\"\r\n    }\r\n    const receive = await createnewLabels(mockLabels,labels, send)\r\n    const callRec = mockLabels.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update color', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        color: \"blue\",\r\n        uses: \"10\",\r\n        idBoard: \"456z\"\r\n    }\r\n    const receive = await createnewLabels(mockLabels,labels, send)\r\n    const callRec = mockLabels.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update name', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        color: \"red\",\r\n        uses: \"15\",\r\n        idBoard: \"456z\"\r\n    }\r\n    const receive = await createnewLabels(mockLabels,labels, send)\r\n    const callRec = mockLabels.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update all', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"yyy\",\r\n        color: \"blue\",\r\n        uses: \"15\",\r\n        idBoard: \"456z\"\r\n    }\r\n    const receive = await createnewLabels(mockLabels,labels, send)\r\n    const callRec = mockLabels.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('have labels already', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        color: \"red\",\r\n        uses: \"10\",\r\n        idBoard: \"456z\"\r\n    }\r\n    const rec = await createnewLabels(mockLabels,labels, send)\r\n    expect(rec).toBe(false)\r\n})\r\n\r\n"]}