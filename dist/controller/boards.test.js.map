{"version":3,"sources":["../../src/controller/boards.test.js"],"names":["jest","mock","mockBoards","boards","id","name","labelNames","test","send","boardsNew","undefined","receive","callRec","getCreate","expect","length","toEqual","getUpdate","rec","toBe"],"mappings":"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","file":"boards.test.js","sourcesContent":["jest.mock('../models', () => { })\r\nimport mongoose from 'mongoose'\r\nimport MockBoards from 'boards'\r\nimport { createnewBoards } from './boards'\r\n\r\nconst mockBoards = new MockBoards()\r\nconst boards = {\r\n    id: \"123a\",\r\n    name: \"xxx\",\r\n    labelNames: {\r\n        \"black\" : \"COOP\",\r\n        \"pink\" : \"Handover protocal\"\r\n    }\r\n}\r\n\r\ntest('new boards', async () => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        labelNames: {\r\n            \"black\" : \"COOP\",\r\n            \"pink\" : \"Handover protocal\"\r\n        }\r\n    }\r\n    const boardsNew = undefined\r\n    const receive = await createnewBoards(mockBoards,boardsNew, send)\r\n    const callRec = mockBoards.getCreate()\r\n    expect(callRec.length).toEqual(1)\r\n});\r\n\r\ntest('update name', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"aaa\",\r\n        labelNames: {\r\n            \"black\" : \"COOP\",\r\n            \"pink\" : \"Handover protocal\"\r\n        }\r\n    }\r\n    const receive = await createnewBoards(mockBoards,boards, send)\r\n    const callRec = mockBoards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update labelname', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        labelNames: {\r\n            \"black\" : \"XXXX\",\r\n            \"pink\" : \"Handover protocal\"\r\n        }\r\n    }\r\n    const receive = await createnewBoards(mockBoards,boards, send)\r\n    const callRec = mockBoards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('update all', async() => {\r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"aaa\",\r\n        labelNames: {\r\n            \"black\" : \"XXXXX\",\r\n            \"pink\" : \"Handover protocal\"\r\n        }\r\n    }\r\n    const receive = await createnewBoards(mockBoards,boards, send)\r\n    const callRec = mockBoards.getUpdate()\r\n    expect(callRec[0]).toEqual(send)\r\n})\r\n\r\ntest('have boards already', async () => {   \r\n    const send = {\r\n        id: \"123a\",\r\n        name: \"xxx\",\r\n        labelNames: {\r\n            \"black\" : \"COOP\",\r\n            \"pink\" : \"Handover protocal\"\r\n        }\r\n    }\r\n    const rec = await createnewBoards(mockBoards,boards, send)\r\n    expect(rec).toBe(false)\r\n});\r\n\r\n\r\n\r\n\r\n\r\n"]}