{"version":3,"sources":["../../src/controller/authenuser.test.js"],"names":["AuthenUsers","test","expect","toBe","givenUser","idUser","username","fullname","token","rec"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,cAAc,uBAApB;AACA;AACA;AACA;;AAEAC,KAAK,qCAAL,EAA4C,YAAM;AAC9CC,WAAO,0BAAS;AACZ,kBAAU,GADE;AAEZ,oBAAY,OAFA;AAGZ,iBAAS;AAHG,KAAT,CAAP,EAIIC,IAJJ,CAIS,KAJT;AAKH,CAND;;AAQAF,KAAK,qBAAL,EAA4B,YAAM;AAC9BC,WAAO,0BAAS;AACZ,iBAAS;AADG,KAAT,CAAP,EAEIC,IAFJ,CAES,IAFT;AAGH,CAJD;;AAMAF,KAAK,sBAAL,EAA6B,YAAM;AAC/BC,WAAO,0BAAS;AACZ,kBAAU;AADE,KAAT,CAAP,EAEIC,IAFJ,CAES,IAFT;AAGH,CAJD;;AAMAF,KAAK,wBAAL,EAA+B,YAAM;AACjCC,WAAO,0BAAS;AACZ,oBAAY;AADA,KAAT,CAAP,EAEIC,IAFJ,CAES,IAFT;AAGH,CAJD;;AAMAF,KAAK,4BAAL,EAAmC,YAAM;AACrCC,WAAO,0BAAS;AACZ,kBAAU,GADE;AAEZ,iBAAS;AAFG,KAAT,CAAP,EAGIC,IAHJ,CAGS,IAHT;AAIH,CALD;;AAOAF,KAAK,8BAAL,EAAqC,YAAM;AACvCC,WAAO,0BAAS;AACZ,oBAAY,OADA;AAEZ,iBAAS;AAFG,KAAT,CAAP,EAGIC,IAHJ,CAGS,IAHT;AAIH,CALD;;AAOAF,KAAK,+BAAL,EAAsC,YAAM;AACxCC,WAAO,0BAAS;AACZ,kBAAU,GADE;AAEZ,oBAAY;AAFA,KAAT,CAAP,EAGIC,IAHJ,CAGS,IAHT;AAIH,CALD;;AAOAF,KAAK,sCAAL,EAA6C,YAAM;AAC/CC,WAAO,0BAAS,EAAT,CAAP,EAAqBC,IAArB,CAA0B,IAA1B;AACH,CAFD;;AAIAF,KAAK,iBAAL,6DAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AACdG,6BADc,GACF;AACdC,gCAAQ,EADM;AAEdC,kCAAU,EAFI;AAGdC,kCAAU,EAHI;AAIdC,+BAAO;AAJO,qBADE;AAAA;AAAA,2BAOF,+BAAcJ,SAAd,CAPE;;AAAA;AAOdK,uBAPc;;AAQpBP,2BAAOO,GAAP,EAAYN,IAAZ,CAAiB,IAAjB;;AARoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAWAF,KAAK,UAAL,6DAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AACPG,6BADO,GACK;AACdC,gCAAQ,GADM;AAEdC,kCAAU,OAFI;AAGdC,kCAAU,YAHI;AAIdC,+BAAO;AAJO,qBADL;AAAA;AAAA,2BAOK,+BAAcJ,SAAd,CAPL;;AAAA;AAOPK,uBAPO;;AAQbP,2BAAOO,GAAP,EAAYN,IAAZ,CAAiB,KAAjB;;AARa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","file":"authenuser.test.js","sourcesContent":["import { createnewUser, checkreq } from './authenuser'\r\nimport MockAuthens from 'authens';\r\n\r\nconst AuthenUsers = new MockAuthens();\r\n// jest.mock('../models/authenuser', () => {\r\n//     return { AuthenUsers }\r\n// });\r\n\r\ntest('checkreq have token,idUser,username', () => {\r\n    expect(checkreq({\r\n        \"idUser\": \"1\",\r\n        \"username\": \"xxxxx\",\r\n        \"token\": \"12345678\"\r\n    })).toBe(false);\r\n});\r\n\r\ntest('checkreq have token', () => {\r\n    expect(checkreq({\r\n        \"token\": \"12345678\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq have idUser', () => {\r\n    expect(checkreq({\r\n        \"idUser\": \"1\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq have username', () => {\r\n    expect(checkreq({\r\n        \"username\": \"xxxxx\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq have token,idUser', () => {\r\n    expect(checkreq({\r\n        \"idUser\": \"1\",\r\n        \"token\": \"12345678\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq have token,username', () => {\r\n    expect(checkreq({\r\n        \"username\": \"xxxxx\",\r\n        \"token\": \"12345678\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq have idUser,username', () => {\r\n    expect(checkreq({\r\n        \"idUser\": \"1\",\r\n        \"username\": \"xxxxx\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq don\\'t have idUser,username', () => {\r\n    expect(checkreq({})).toBe(true);\r\n});\r\n\r\ntest('create new user', async () => {\r\n    const givenUser = {\r\n        idUser: \"\",\r\n        username: \"\",\r\n        fullname: \"\",\r\n        token: \"\"\r\n    }\r\n    const rec = await createnewUser(givenUser)\r\n    expect(rec).toBe(true)\r\n});\r\n\r\ntest('old user', async () => {\r\n    const givenUser = {\r\n        idUser: \"1\",\r\n        username: \"xxxxx\",\r\n        fullname: \"xxxx xxxxx\",\r\n        token: \"12345678\"\r\n    }\r\n    const rec = await createnewUser(givenUser)\r\n    expect(rec).toBe(false)\r\n});\r\n\r\n\r\n\r\n"]}