{"version":3,"sources":["../../src/controller/authenuser.test.js"],"names":["test","expect","toBe"],"mappings":";;AAAA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,KAAK,qCAAL,EAA4C,YAAM;AAC9CC,WAAO,0BAAS;AACZ,kBAAU,GADE;AAEZ,oBAAY,OAFA;AAGZ,iBAAS;AAHG,KAAT,CAAP,MAIO,KAJP;AAKH,CAND;;AAQAD,KAAK,qBAAL,EAA4B,YAAM;AAC9BC,WAAO,0BAAS;AACZ,iBAAS;AADG,KAAT,CAAP,EAEIC,IAFJ,CAES,IAFT;AAGH,CAJD;;AAMAF,KAAK,sBAAL,EAA6B,YAAM;AAC/BC,WAAO,0BAAS;AACZ,kBAAU;AADE,KAAT,CAAP,EAEIC,IAFJ,CAES,IAFT;AAGH,CAJD;;AAMAF,KAAK,wBAAL,EAA+B,YAAM;AACjCC,WAAO,0BAAS;AACZ,oBAAY;AADA,KAAT,CAAP,EAEIC,IAFJ,CAES,IAFT;AAGH,CAJD;;AAMAF,KAAK,4BAAL,EAAmC,YAAM;AACrCC,WAAO,0BAAS;AACZ,kBAAU,GADE;AAEZ,iBAAS;AAFG,KAAT,CAAP,EAGIC,IAHJ,CAGS,IAHT;AAIH,CALD;;AAOAF,KAAK,8BAAL,EAAqC,YAAM;AACvCC,WAAO,0BAAS;AACZ,oBAAY,OADA;AAEZ,iBAAS;AAFG,KAAT,CAAP,EAGIC,IAHJ,CAGS,IAHT;AAIH,CALD;;AAOAF,KAAK,+BAAL,EAAsC,YAAM;AACxCC,WAAO,0BAAS;AACZ,kBAAU,GADE;AAEZ,oBAAY;AAFA,KAAT,CAAP,EAGIC,IAHJ,CAGS,IAHT;AAIH,CALD;;AAOAF,KAAK,sCAAL,EAA6C,YAAM;AAC/CC,WAAO,0BAAS,EAAT,CAAP,EAAqBC,IAArB,CAA0B,IAA1B;AACH,CAFD;;AAIA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"authenuser.test.js","sourcesContent":["import { createnewUser, checkreq } from './authenuser'\r\nimport MockAuthens from 'authens';\r\n\r\n// const AuthenUsers = new MockAuthens();\r\n// jest.mock('../controller', () => {})\r\n// jest.mock('./authenuser', () => {\r\n//   return {\r\n//     createnewUser: jest.fn().mockReturnValue(Promise.resolve([]))\r\n//   }\r\n// });\r\n\r\ntest('checkreq have token,idUser,username', () => {\r\n    expect(checkreq({\r\n        \"idUser\": \"1\",\r\n        \"username\": \"xxxxx\",\r\n        \"token\": \"12345678\"\r\n    }))===(false);\r\n});\r\n\r\ntest('checkreq have token', () => {\r\n    expect(checkreq({\r\n        \"token\": \"12345678\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq have idUser', () => {\r\n    expect(checkreq({\r\n        \"idUser\": \"1\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq have username', () => {\r\n    expect(checkreq({\r\n        \"username\": \"xxxxx\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq have token,idUser', () => {\r\n    expect(checkreq({\r\n        \"idUser\": \"1\",\r\n        \"token\": \"12345678\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq have token,username', () => {\r\n    expect(checkreq({\r\n        \"username\": \"xxxxx\",\r\n        \"token\": \"12345678\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq have idUser,username', () => {\r\n    expect(checkreq({\r\n        \"idUser\": \"1\",\r\n        \"username\": \"xxxxx\"\r\n    })).toBe(true);\r\n});\r\n\r\ntest('checkreq don\\'t have idUser,username', () => {\r\n    expect(checkreq({})).toBe(true);\r\n});\r\n\r\n// test('create new user', async () => {\r\n    // const givenUser = {\r\n    //     idUser: \"\",\r\n    //     username: \"\",\r\n    //     fullname: \"\",\r\n    //     token: \"\"\r\n    // }\r\n    // const rec = await createnewUser(givenUser)\r\n    // expect(rec).toBe(true)\r\n\r\n    // const companies = ['Computerlogy', 'Mojito', 'BAY'].map((item, index) => ({_id: index, idUser: item}))\r\n    // const bayCompany = companies.find((com) => com.name === 'Computerlogy')\r\n    // const Computerlogy = await global['Domain'].findOne({ name: 'Computerlogy'})\r\n    // const General = await global['Domain'].findOne({ name: 'General'})\r\n    // bayCompany.domain_ids.push(Computerlogy._id);\r\n    // bayCompany.domain_ids.push(General._id);\r\n    // global['Company'].setRecords(companies)\r\n    // const domains = await findCorpusWithCompany('Computerlogy', global);\r\n    // expect(domains).toContain(Computerlogy)\r\n    // expect(domains).toContain(General)\r\n// });\r\n\r\n// test('old user', async () => {\r\n//     const givenUser = {\r\n//         idUser: \"1\",\r\n//         username: \"xxxxx\",\r\n//         fullname: \"xxxx xxxxx\",\r\n//         token: \"12345678\"\r\n//     }\r\n//     const rec = await createnewUser(givenUser)\r\n//     expect(rec).toBe(false)\r\n// });\r\n\r\n\r\n\r\n"]}