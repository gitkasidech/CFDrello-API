{"version":3,"sources":["../../src/controller/alldata.js"],"names":["OAuth","require","requestURL","accessURL","authorizeURL","appName","key","secret","loginCallback","oauth_secrets","oauth","loginAuthen","req","res","console","log","Date","getOAuthRequestToken","error","token","tokenSecret","results","redirect","allData","query","parse","url","oauth_token","verifier","oauth_verifier","getOAuthAccessToken","accessToken","accessTokenSecret","getProtectedResource","data","respond","dataJ","JSON","json"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AAFA,IAAMA,QAAQC,QAAQ,OAAR,EAAiBD,KAA/B;;;AAIA,IAAME,aAAa,2CAAnB;AACA,IAAMC,YAAY,0CAAlB;AACA,IAAMC,eAAe,0CAArB;AACA,IAAMC,UAAU,oBAAhB;;AAEA,IAAMC,MAAM,kCAAZ;AACA,IAAMC,SAAS,kEAAf;;AAEA,IAAMC,gBAAgB,gCAAtB;AACA,IAAMC,gBAAgB,EAAtB;;AAEA,IAAMC,QAAQ,IAAIV,KAAJ,CAAUE,UAAV,EAAsBC,SAAtB,EAAiCG,GAAjC,EAAsCC,MAAtC,EAA8C,MAA9C,EAAsDC,aAAtD,EAAqE,WAArE,CAAd;;AAEO,IAAMG;AAAA,0EAAc,iBAAOC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AACvBC,gCAAQC,GAAR,kCAA+BC,MAA/B;AACAN,8BAAMO,oBAAN,CAA2B,UAACC,KAAD,EAAQC,KAAR,EAAeC,WAAf,EAA4BC,OAA5B,EAAwC;AAC/DP,oCAAQC,GAAR,uCAAgDI,KAAhD,uBAAuEC,WAAvE,mBAAgG,yBAAeC,OAAf,CAAhG,iBAAmI,yBAAeH,KAAf,CAAnI;AACAT,0CAAcU,KAAd,IAAuBC,WAAvB;AACAP,gCAAIS,QAAJ,CAAgBlB,YAAhB,qBAA4Ce,KAA5C,cAA0Dd,OAA1D;AACH,yBAJD;;AAFuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;AASA,IAAMkB;AAAA,2EAAU,kBAAOX,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACbW,6BADa,GACL,cAAIC,KAAJ,CAAUb,IAAIc,GAAd,EAAmB,IAAnB,EAAyBF,KADpB;AAEbL,6BAFa,GAELK,MAAMG,WAFD;AAGbP,mCAHa,GAGCX,cAAcU,KAAd,CAHD;AAIbS,gCAJa,GAIFJ,MAAMK,cAJJ;;AAKnBnB,8BAAMoB,mBAAN,CAA0BX,KAA1B,EAAiCC,WAAjC,EAA8CQ,QAA9C,EAAwD,UAACV,KAAD,EAAQa,WAAR,EAAqBC,iBAArB,EAAwCX,OAAxC,EAAoD;AACxGP,oCAAQC,GAAR,4CAAqDgB,WAArD,6BAAwFC,iBAAxF,iBAAqHd,KAArH;AACAR,kCAAMuB,oBAAN,CAA2B,qCAA3B,EAAkE,KAAlE,EAAwEF,WAAxE,EAAqFC,iBAArF,EAAwG,UAACd,KAAD,EAAQgB,IAAR,EAAcC,OAAd,EAA0B;AAC9HrB,wCAAQC,GAAR,6CAAsDgB,WAAtD,6BAAyFC,iBAAzF;AACA,oCAAMI,QAAQC,KAAKZ,KAAL,CAAWS,IAAX,CAAd;AACAE,sCAAMjB,KAAN,GAAcY,WAAd;AACAlB,oCAAIyB,IAAJ,CAASF,KAAT;AACH,6BALD;AAMH,yBARD;;AALmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"alldata.js","sourcesContent":["import http from 'http'\r\nconst OAuth = require('oauth').OAuth\r\nimport url from 'url'\r\nimport { havedata } from './members'\r\n\r\nconst requestURL = \"https://trello.com/1/OAuthGetRequestToken\"\r\nconst accessURL = \"https://trello.com/1/OAuthGetAccessToken\"\r\nconst authorizeURL = \"https://trello.com/1/OAuthAuthorizeToken\"\r\nconst appName = \"CFDrello Dashboard\"\r\n\r\nconst key = \"662fa775f48bd56cea11e8be634da284\"\r\nconst secret = \"8e3dd310f5a5a5e8757563ecc30d992664d895abc296441bfc1cf515ffdefa51\"\r\n\r\nconst loginCallback = \"http://localhost:3000/callback\";\r\nconst oauth_secrets = {}\r\n\r\nconst oauth = new OAuth(requestURL, accessURL, key, secret, \"1.0A\", loginCallback, \"HMAC-SHA1\")\r\n\r\nexport const loginAuthen = async (req,res) => {\r\n    console.log(`GET '/login' ðŸ¤  ${Date()}`)\r\n    oauth.getOAuthRequestToken((error, token, tokenSecret, results) => {\r\n        console.log(`in getOAuthRequestToken - token: ${token}, tokenSecret: ${tokenSecret}, resultes ${JSON.stringify(results)}, error: ${JSON.stringify(error)}`)\r\n        oauth_secrets[token] = tokenSecret\r\n        res.redirect(`${authorizeURL}?oauth_token=${token}&name=${appName}&expiration=never`)\r\n    });\r\n}\r\n\r\nexport const allData = async (req,res) => {\r\n    const query = url.parse(req.url, true).query\r\n    const token = query.oauth_token\r\n    const tokenSecret = oauth_secrets[token]\r\n    const verifier = query.oauth_verifier;\r\n    oauth.getOAuthAccessToken(token, tokenSecret, verifier, (error, accessToken, accessTokenSecret, results) => {\r\n        console.log(`in getOAuthAccessToken - accessToken: ${accessToken}, accessTokenSecret: ${accessTokenSecret}, error: ${error}`)\r\n        oauth.getProtectedResource(\"https://api.trello.com/1/members/me\", \"GET\",accessToken, accessTokenSecret, (error, data, respond) => {\r\n            console.log(`in getProtectedResource - accessToken: ${accessToken}, accessTokenSecret: ${accessTokenSecret}`)\r\n            const dataJ = JSON.parse(data)\r\n            dataJ.token = accessToken\r\n            res.json(dataJ)\r\n        })\r\n    })\r\n}"]}