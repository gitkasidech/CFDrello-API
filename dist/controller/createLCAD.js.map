{"version":3,"sources":["../../src/controller/createLCAD.js"],"names":["saveLCAD","req","res","next","console","log","Date","inf","body","checkInf","callInf","status","send","key","promises","idBoard","token","all","callLabels","callCards","callActions","postDateActionCards","d","setDate","getDate","endDate","day","getDay","startDate","split","yearS","monthS","dateS","dayS","yearE","monthE","dateE","dayE","join","data","idDashboard","_id","start","end","getDateActionCards","json","name","listComp","colorComp","listInpr","colorInpr","listBack","colorBack","idMember"],"mappings":"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","file":"createLCAD.js","sourcesContent":["import http from 'http'\nimport url from 'url'\nimport { checkCreateLabels } from './labels'\nimport { checkCreateCards } from './cards'\nimport { checkCreateActions } from './actions'\nimport { countData } from './getDateActionCards'\nimport { createDateActionCards } from './dateActionCards'\nimport {convertDates} from './convertDates'\nimport {Actions} from '../models/actions'\n\nexport const saveLCAD = async (req, res, next) => {\n    console.log(`POST '/createlcad' ðŸ¤  ${Date()}`)\n    const inf = req.body\n    const callInf = await checkInf(inf);\n    if (callInf)\n        return res.status(500).send(\"format should be\")\n\n    const key = \"662fa775f48bd56cea11e8be634da284\"\n    const promises = [\n        checkCreateLabels(inf.idBoard,key,inf.token),\n        checkCreateCards(inf.idBoard,key,inf.token),\n        checkCreateActions(inf.idBoard,key,inf.token)\n    ]\n    const [callLabels,callCards,callActions] = await Promise.all(promises) \n    console.log(callActions)\n    const postDateActionCards = await createDateActionCards(callActions,inf)\n\n    let d = new Date()\n    d.setDate(d.getDate() - 1)\n    let endDate = await convertDates(d)\n    let day = d.getDay()\n    d.setDate(d.getDate() - day)\n    let startDate = await convertDates(d)\n    let [yearS, monthS, dateS, dayS] = startDate.split('-')\n    let [yearE, monthE, dateE, dayE] = endDate.split('-')\n    startDate = [yearS, monthS, dateS].join('-')\n    endDate = [yearE, monthE, dateE].join('-')\n    const data = {\n        idDashboard: inf._id,\n        start: startDate,\n        end: endDate\n    }\n    const getDateActionCards = await countData(data)\n    res.json(getDateActionCards)\n}\n\nexport const checkInf = (inf) => {\n    if (!inf.name || !inf.idBoard || !inf.listComp || !inf.colorComp || !inf.listInpr || !inf.colorInpr || !inf.listBack || !inf.colorBack || !inf.idMember || !inf.token) {\n        return true\n    } else {\n        return false\n    }\n}\n\n"]}