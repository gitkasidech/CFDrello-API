{"version":3,"sources":["../../src/controller/createLCAD.js"],"names":["saveLCAD","req","res","next","console","log","Date","inf","body","checkInf","callInf","status","send","key","promises","idBoard","token","all","callLabels","callCards","callActionsDate","now","iDate","i","sinceDate","setDate","getDate","beforeDate","callActions","postDateActionCards","d","endDate","day","getDay","startDate","data","idDashboard","_id","start","end","getDateActionCards","json","name","listComp","colorComp","listInpr","colorInpr","listBack","colorBack","idMember"],"mappings":"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","file":"createLCAD.js","sourcesContent":["import http from 'http'\nimport url from 'url'\nimport { checkCreateLabels } from './labels'\nimport { checkCreateCards } from './cards'\nimport { checkCreateActions,getDateCreateBoard } from './actions'\nimport { countData } from './getDateActionCards'\nimport { createDateActionCards } from './dateActionCards'\nimport {convertDates,convertShortDates} from './convertDates'\nimport {Actions} from '../models/actions'\n\nexport const saveLCAD = async (req, res, next) => {\n    console.log(`POST '/createlcad' ðŸ¤  ${Date()}`)\n    const inf = req.body\n    const callInf = await checkInf(inf);\n    if (callInf)\n        return res.status(500).send(\"format should be\")\n\n    const key = \"662fa775f48bd56cea11e8be634da284\"\n    const promises = [\n        checkCreateLabels(inf.idBoard,key,inf.token),\n        checkCreateCards(inf.idBoard,key,inf.token),\n        getDateCreateBoard(inf.idBoard,key,inf.token)\n    ]\n    const [callLabels,callCards,callActionsDate] = await Promise.all(promises)\n    const now = new Date()\n    let iDate = new Date(callActionsDate)\n    for(let i = new Date(callActionsDate); i <= now; i.setDate(i.getDate() + 1)){\n        let sinceDate = await convertShortDates(iDate)\n        iDate.setDate(iDate.getDate() + 1)\n        let beforeDate = await convertShortDates(iDate)\n        const callActions = await checkCreateActions(inf.idBoard,key,inf.token,sinceDate,beforeDate)\n    }\n    const postDateActionCards = await createDateActionCards(callActionsDate,inf)\n\n    let d = new Date()\n    d.setDate(d.getDate() - 1)\n    let endDate = await convertShortDates(d)\n    let day = d.getDay()\n    d.setDate(d.getDate() - day)\n    let startDate = await convertShortDates(d)\n    const data = {\n        idDashboard: inf._id,\n        start: startDate,\n        end: endDate\n    }\n    const getDateActionCards = await countData(data)\n    res.json(getDateActionCards)\n}\n\nexport const checkInf = (inf) => {\n    if (!inf.name || !inf.idBoard || !inf.listComp || !inf.colorComp || !inf.listInpr || !inf.colorInpr || !inf.listBack || !inf.colorBack || !inf.idMember || !inf.token) {\n        return true\n    } else {\n        return false\n    }\n}\n\n"]}