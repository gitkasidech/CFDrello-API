{"version":3,"sources":["../../src/controller/createLCAD.js"],"names":["saveLCAD","req","res","next","console","log","Date","inf","body","checkInf","callInf","status","send","key","promises","idBoard","token","all","callLabels","callCards","callActionsDate","now","actionDate","find","findActions","lenFindActions","length","date","setDate","getDate","i","sinceActionDate","beforeActionDate","callActions","postDateActionCards","d","endDate","day","getDay","startDate","data","idDashboard","_id","start","end","getDateActionCards","json","name","listComp","colorComp","listInpr","colorInpr","listBack","colorBack","idMember"],"mappings":"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","file":"createLCAD.js","sourcesContent":["import { checkCreateLabels } from './labels'\nimport { checkCreateCards } from './cards'\nimport { checkCreateActions,getDateCreateBoard } from './actions'\nimport { countData } from './getDateActionCards'\nimport { createDateActionCards } from './dateActionCards'\nimport {convertDates,convertShortDates} from './convertDates'\nimport {Actions} from '../models/actions'\nimport {Cards} from '../models/cards'\n\nexport const saveLCAD = async (req, res, next) => {\n    console.log(`POST '/createlcad' ðŸ¤  ${Date()}`)\n    const inf = req.body\n    const callInf = await checkInf(inf);\n    if (callInf)\n        return res.status(500).send(\"format should be\")\n\n    const key = \"662fa775f48bd56cea11e8be634da284\"\n    const promises = [\n        checkCreateLabels(inf.idBoard,key,inf.token),\n        checkCreateCards(inf.idBoard,key,inf.token),\n        getDateCreateBoard(inf.idBoard,key,inf.token)\n    ]\n    const [callLabels,callCards,callActionsDate] = await Promise.all(promises)\n\n    const now = new Date()\n    // let cardDate = new Date(callActionsDate)\n    // for(let i = new Date(cardDate); i <= now; i.setDate(i.getDate() + 1)){\n    //     let sinceCardDate = await convertShortDates(cardDate)\n    //     cardDate.setDate(cardDate.getDate() + 1)\n    //     let beforeCardDate = await convertShortDates(cardDate)\n    //     const callCards = await checkCreateCards(inf.idBoard,key,inf.token,sinceCardDate,beforeCardDate)\n    // }\n\n    let actionDate = new Date(callActionsDate)\n    const findActions = await Actions.find({\"data.board.id\":inf.idBoard})\n    const lenFindActions = findActions.length \n    if(lenFindActions!=0){\n        actionDate = new Date(findActions[lenFindActions-1].date)\n    } \n    now.setDate(now.getDate() + 1)\n    for(let i = new Date(actionDate); i <= now; i.setDate(i.getDate() + 2)){\n        let sinceActionDate = await convertShortDates(actionDate)\n        actionDate.setDate(actionDate.getDate() + 2)\n        let beforeActionDate = await convertShortDates(actionDate)\n        const callActions = await checkCreateActions(inf.idBoard,key,inf.token,sinceActionDate,beforeActionDate)\n    }\n    const postDateActionCards = await createDateActionCards(callActionsDate,inf)\n\n    let d = new Date()\n    d.setDate(d.getDate() - 1)\n    let endDate = await convertShortDates(d)\n    let day = d.getDay()\n    d.setDate(d.getDate() - day)\n    let startDate = await convertShortDates(d)\n    const data = {\n        idDashboard: inf._id,\n        start: startDate,\n        end: endDate\n    }\n    const getDateActionCards = await countData(data)\n    console.log(Date())\n    res.json(getDateActionCards)\n}\n\nexport const checkInf = (inf) => {\n    if (!inf.name || !inf.idBoard || !inf.listComp || !inf.colorComp || !inf.listInpr || !inf.colorInpr || !inf.listBack || !inf.colorBack || !inf.idMember || !inf.token) {\n        return true\n    } else {\n        return false\n    }\n}\n\n"]}